#!/bin/bash

function error {
  if [ -n "$1" ]; then
    echo "Test failed: $1"
  else
    echo "Test failed!"
  fi
}

if uname -a | grep Cygwin; then
  PLATFORM="win"
else
  PLATFORM="unix"
fi

function smartpath {
  case $PLATFORM in
    win)
      cygpath -w "$1"
      ;;
    *)
      echo "$1"
  esac
}

function smartcmp {
  TESTED="$1"
  EXPECTED="$2"
  MSG="$3"

  FILE1=$(mktemp)
  FILE2=$(mktemp)

  echo "$TESTED" > "$FILE1"
  echo "$EXPECTED" > "$FILE2"

  cmp -s "$FILE1" "$FILE2"
  EXITCODE=$?

  if [[ "$EXITCODE" -ne "0" ]]; then
    error "$MSG"
    diff -u "$FILE2" "$FILE1"
    rm "$FILE1" "$FILE2" 
    exit $EXITCODE
  else
    rm "$FILE1" "$FILE2" 
  fi
}

TESTDIR=$1
for dir in `ls "$TESTDIR/build/"`; do
  if [[ $dir == *"lib"* ]]; then
    export PYTHONPATH=$(smartpath $TESTDIR/build/$dir)
  fi
done
export HGRCPATH=$(smartpath `mktemp`)
case $PLATFORM in
  win)
    hg="$TESTDIR/build/scripts-2.7/hg.exe"
    ;;
  *)
    hg="$TESTDIR/build/scripts-2.7/hg"
    ;;
esac

cat >> $HGRCPATH <<EOF
[ui]
user = Test <test@fb.com>
EOF

rm -rf "$TESTDIR/TESTING"
mkdir -p "$TESTDIR/TESTING"
cd "$TESTDIR/TESTING"

$hg init server

# Clone server and enable extension
$hg clone -q server client
cd client
cat >> .hg/hgrc <<EOF
[extensions]
lfs=$(smartpath $TESTDIR/hgext/lfs/)
[lfs]
threshold=1000B
chunksize=1000B
blobstore=cache/localblobstore
remotestore=dummy
remotepath=$(smartpath $TESTDIR/TESTING/dummy/)
EOF

# Commit small file
echo s > smallfile
$hg commit -Aqm "add small file"

# Commit large file
echolargefile
$hg commit -Aqm "add large file"

smartcmp "`$hg debugdata largefile 0`" \
  "version https://git-lfs.github.com/spec/chunking
chunks d7dbc611df1fe7dfacfe267a2bfd32ba8fc27ad16aa72af7e6c553a120b92f18:1000,ed0f071aa4ff28ab9863b6cfc5f407e915612d70502422e4ab9b09f3dfec4a74:501
hashalgo sha256
size 1501" \
  "Ensure metadata is stored"

smartcmp "`find .hg/cache/localblobstore | sort`" \
  ".hg/cache/localblobstore
.hg/cache/localblobstore/d7
.hg/cache/localblobstore/d7/dbc611df1fe7dfacfe267a2bfd32ba8fc27ad16aa72af7e6c553a120b92f18
.hg/cache/localblobstore/ed
.hg/cache/localblobstore/ed/0f071aa4ff28ab9863b6cfc5f407e915612d70502422e4ab9b09f3dfec4a74" \
  "Check the blobstore is populated"

smartcmp "`cat .hg/cache/localblobstore/d7/dbc611df1fe7dfacfe267a2bfd32ba8fc27ad16aa72af7e6c553a120b92f18`" \

  "Check that the blob stored contains the actual contents of the file"

smartcmp "`cat .hg/cache/localblobstore/ed/0f071aa4ff28ab9863b6cfc5f407e915612d70502422e4ab9b09f3dfec4a74`" \
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC" \
  "Check that the blob stored contains the actual contents of the file"


# Push changes to the server
smartcmp "`$hg push`" \
  "pushing to $(smartpath $TESTDIR/TESTING/server)
searching for changes
lfs: computing set of blobs to upload
lfs: uploading the blobs to the remote (2 chunk(s), 1.47 KB)
adding changesets
adding manifests
adding file changes
added 2 changesets with 2 changes to 2 files" \
  "Check that the push happens correctly"

# Initialize new client (not cloning) and setup extension
cd ../
mkdir client2
cd client2
$hg init
cat >> .hg/hgrc <<EOF
[paths]
default = $(smartpath $TESTDIR/TESTING/server)
[extensions]
lfs=$(smartpath $TESTDIR/hgext/lfs/)
[lfs]
threshold=1000B
chunksize=1000B
blobstore=cache/localblobstore
remotestore=dummy
remotepath=$(smartpath $TESTDIR/TESTING/dummy/)
EOF

# Pull from server
smartcmp "`$hg pull default`" \
  "pulling from $(smartpath $TESTDIR/TESTING/server)
requesting all changes
adding changesets
adding manifests
adding file changes
added 2 changesets with 2 changes to 2 files
(run 'hg update' to get a working copy)" \
  "Check that pull happens correctly"

# Check the blobstore is not yet populated
if [ -e .hg/cache/localblobstore ]; then
  error "The blobstore was populated on pull"
  exit 1
fi

smartcmp "`$hg update`" \
  "2 files updated, 0 files merged, 0 files removed, 0 files unresolved" \
  "Update to the last revision containing the large file"

smartcmp \
  "`find .hg/cache/localblobstore | sort`", \
  ".hg/cache/localblobstore
.hg/cache/localblobstore/d7
.hg/cache/localblobstore/d7/dbc611df1fe7dfacfe267a2bfd32ba8fc27ad16aa72af7e6c553a120b92f18
.hg/cache/localblobstore/ed
.hg/cache/localblobstore/ed/0f071aa4ff28ab9863b6cfc5f407e915612d70502422e4ab9b09f3dfec4a74", \
  "Check that blobstore has been populated on update"

smartcmp \
  "`$hg cat -r . largefile`", \

  "Check the contents of the file are fetched from blobstore when requested"

smartcmp \
  "`cat largefile`", \

  "Check the file has been copied in the working copy"

rm -rf "$TESTDIR/TESTING"
rm $HGRCPATH
