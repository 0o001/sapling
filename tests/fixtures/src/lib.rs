// Copyright (c) 2018-present, Facebook, Inc.
// All Rights Reserved.
//
// This software may be used and distributed according to the terms of the
// GNU General Public License version 2 or any later version.

#![deny(warnings)]

#[cfg(test)]
extern crate async_unit;
extern crate blobrepo;
extern crate blobstore;
extern crate bookmarks;
extern crate bytes;
extern crate futures;
#[macro_use]
extern crate maplit;
extern crate mercurial_types;
extern crate mononoke_types;
extern crate slog;

use std::collections::BTreeMap;
use std::str::FromStr;

use blobrepo::{save_bonsai_changeset, BlobRepo};
use bookmarks::Bookmark;
use bytes::Bytes;
use futures::future::{join_all, Future};
use mercurial_types::{HgChangesetId, MPath};
use mononoke_types::{BonsaiChangesetMut, DateTime, FileChange, FileContents, FileType};
use slog::Logger;

fn store_files(
    files: BTreeMap<&str, Option<&str>>,
    repo: BlobRepo,
) -> BTreeMap<MPath, Option<FileChange>> {
    let mut res = btreemap!{};

    for (path, content) in files {
        let path = MPath::new(path).unwrap();
        match content {
            Some(content) => {
                let size = content.len();
                let content = FileContents::Bytes(Bytes::from(content));
                let content_id = repo.unittest_store(content).wait().unwrap();

                let file_change = FileChange::new(content_id, FileType::Regular, size as u64, None);
                res.insert(path, Some(file_change));
            }
            None => {
                res.insert(path, None);
            }
        }
    }
    res
}

fn create_bonsai_changeset_from_test_data(
    blobrepo: BlobRepo,
    files: BTreeMap<&str, Option<&str>>,
    commit_metadata: BTreeMap<&str, &str>,
) {
    let file_changes = store_files(files, blobrepo.clone());
    let date: Vec<_> = commit_metadata
        .get("author_date")
        .unwrap()
        .split(" ")
        .map(|s| s.parse::<i64>().unwrap())
        .collect();

    let parents = commit_metadata
        .get("parents")
        .unwrap()
        .split(" ")
        .filter(|s| !s.is_empty())
        .map(|s| HgChangesetId::from_str(s).unwrap())
        .map(|p| {
            blobrepo
                .get_bonsai_from_hg(&p)
                .map(|maybe_cs| maybe_cs.unwrap())
        });

    let bonsai_parents = join_all(parents).wait().unwrap();

    let bcs = BonsaiChangesetMut {
        parents: bonsai_parents,
        author: commit_metadata.get("author").unwrap().to_string(),
        author_date: DateTime::from_timestamp(*date.get(0).unwrap(), *date.get(1).unwrap() as i32)
            .unwrap(),
        committer: None,
        committer_date: None,
        message: commit_metadata.get("message").unwrap().to_string(),
        extra: btreemap!{},
        file_changes,
    }.freeze()
        .unwrap();

    let bcs_id = bcs.get_changeset_id();
    save_bonsai_changeset(bcs, blobrepo.clone()).wait().unwrap();

    let hg_cs = blobrepo
        .get_hg_from_bonsai_changeset(bcs_id)
        .wait()
        .unwrap();

    // TODO(stash): set only for heads
    let mut txn = blobrepo.update_bookmark_transaction();
    txn.force_set(
        &Bookmark::new(format!("bookmark-{}", hg_cs)).unwrap(),
        &hg_cs,
    ).unwrap();
    txn.commit().wait().unwrap();

    assert_eq!(
        hg_cs,
        HgChangesetId::from_str(commit_metadata.get("expected_hg_changeset").unwrap()).unwrap()
    );
}

pub mod linear {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "1" => Some("1\n"),
            "files" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041758 25200",
            "message"=> "added 1",
            "expected_hg_changeset"=> "2d7d4ba9ce0a6ffd222de7785b249ead9c51c536",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
            "files" => Some("1\n2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "2d7d4ba9ce0a6ffd222de7785b249ead9c51c536",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041758 25200",
            "message"=> "added 2",
            "expected_hg_changeset"=> "3e0e761030db6e479a7fb58b12881883f9f8c63f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
            "files" => Some("1\n2\n3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3e0e761030db6e479a7fb58b12881883f9f8c63f",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041758 25200",
            "message"=> "added 3",
            "expected_hg_changeset"=> "607314ef579bd2407752361ba1b0c1729d08b281",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
            "files" => Some("1\n2\n3\n4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "607314ef579bd2407752361ba1b0c1729d08b281",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041759 25200",
            "message"=> "added 4",
            "expected_hg_changeset"=> "d0a361e9022d226ae52f689667bd7d212a19cfe0",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
            "files" => Some("1\n2\n3\n4\n5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d0a361e9022d226ae52f689667bd7d212a19cfe0",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041759 25200",
            "message"=> "added 5",
            "expected_hg_changeset"=> "cb15ca4a43a59acff5388cea9648c162afde8372",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "6" => Some("6\n"),
            "files" => Some("1\n2\n3\n4\n5\n6\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "cb15ca4a43a59acff5388cea9648c162afde8372",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041760 25200",
            "message"=> "added 6",
            "expected_hg_changeset"=> "eed3a8c0ec67b6a6fe2eb3543334df3f0b4f202b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "7" => Some("7\n"),
            "files" => Some("1\n2\n3\n4\n5\n6\n7\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "eed3a8c0ec67b6a6fe2eb3543334df3f0b4f202b",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041760 25200",
            "message"=> "added 7",
            "expected_hg_changeset"=> "0ed509bf086fadcb8a8a5384dc3b550729b0fc17",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "8" => Some("8\n"),
            "files" => Some("1\n2\n3\n4\n5\n6\n7\n8\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "0ed509bf086fadcb8a8a5384dc3b550729b0fc17",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041761 25200",
            "message"=> "added 8",
            "expected_hg_changeset"=> "a9473beb2eb03ddb1cccc3fbaeb8a4820f9cd157",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "9" => Some("9\n"),
            "files" => Some("1\n2\n3\n4\n5\n6\n7\n8\n9\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "a9473beb2eb03ddb1cccc3fbaeb8a4820f9cd157",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041761 25200",
            "message"=> "added 9",
            "expected_hg_changeset"=> "3c15267ebf11807f3d772eb891272b911ec68759",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "10" => Some("10\n"),
            "files" => Some("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3c15267ebf11807f3d772eb891272b911ec68759",
            "author"=> "Jeremy Fitzhardinge <jsgf@fb.com>",
            "author_date"=> "1504041761 25200",
            "message"=> "added 10",
            "expected_hg_changeset"=> "a5ffa77602a066db7d5cfb9fb5823a0895717c5a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod branch_even {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "base" => Some("base\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430496 25200",
            "message"=> "base",
            "expected_hg_changeset"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430535 25200",
            "message"=> "Branch 1",
            "expected_hg_changeset"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430543 25200",
            "message"=> "Branch 2",
            "expected_hg_changeset"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430612 25200",
            "message"=> "Doubled",
            "expected_hg_changeset"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430628 25200",
            "message"=> "Add one",
            "expected_hg_changeset"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435041 25200",
            "message"=> "I think 4 is a nice number",
            "expected_hg_changeset"=> "16839021e338500b3cf7c9b871c8a07351697d68",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435062 25200",
            "message"=> "Replace the base",
            "expected_hg_changeset"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod branch_uneven {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "base" => Some("base\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430496 25200",
            "message"=> "base",
            "expected_hg_changeset"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430535 25200",
            "message"=> "Branch 1",
            "expected_hg_changeset"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430543 25200",
            "message"=> "Branch 2",
            "expected_hg_changeset"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430612 25200",
            "message"=> "Doubled",
            "expected_hg_changeset"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430628 25200",
            "message"=> "Add one",
            "expected_hg_changeset"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435041 25200",
            "message"=> "I think 4 is a nice number",
            "expected_hg_changeset"=> "16839021e338500b3cf7c9b871c8a07351697d68",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435062 25200",
            "message"=> "Replace the base",
            "expected_hg_changeset"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "795b8133cf375f6d68d27c6c23db24cd5d0cd00f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "795b8133cf375f6d68d27c6c23db24cd5d0cd00f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "bc7b4d0f858c19e2474b03e442b8495fd7aeef33",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "bc7b4d0f858c19e2474b03e442b8495fd7aeef33",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "fc2cef43395ff3a7b28159007f63d6529d2f41ca",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "fc2cef43395ff3a7b28159007f63d6529d2f41ca",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "5d43888a3c972fe68c224f93d41b30e9f888df7c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "5d43888a3c972fe68c224f93d41b30e9f888df7c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "264f01429683b3dd8042cb3979e8bf37007118bc",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod branch_wide {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506511707 25200",
            "message"=> "One",
            "expected_hg_changeset"=> "ecba698fee57eeeef88ac3dcc3b623ede4af47bd",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2.1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "ecba698fee57eeeef88ac3dcc3b623ede4af47bd",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506511730 25200",
            "message"=> "Two.one",
            "expected_hg_changeset"=> "9e8521affb7f9d10e9551a99c526e69909042b20",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2.2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "ecba698fee57eeeef88ac3dcc3b623ede4af47bd",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506511742 25200",
            "message"=> "Two.two",
            "expected_hg_changeset"=> "4685e9e62e4885d477ead6964a7600c750e39b03",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3.1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "9e8521affb7f9d10e9551a99c526e69909042b20",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506512909 25200",
            "message"=> "Three.one",
            "expected_hg_changeset"=> "b6a8169454af58b4b72b3665f9aa0d25529755ff",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3.2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "9e8521affb7f9d10e9551a99c526e69909042b20",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506512921 25200",
            "message"=> "Three.two",
            "expected_hg_changeset"=> "c27ef5b7f15e9930e5b93b1f32cc2108a2aabe12",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3.3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "4685e9e62e4885d477ead6964a7600c750e39b03",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506512936 25200",
            "message"=> "Three.three",
            "expected_hg_changeset"=> "04decbb0d1a65789728250ddea2fe8d00248e01c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3.4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "4685e9e62e4885d477ead6964a7600c750e39b03",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506512945 25200",
            "message"=> "Three.four",
            "expected_hg_changeset"=> "49f53ab171171b3180e125b918bd1cf0af7e5449",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod merge_even {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "base" => Some("base\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430496 25200",
            "message"=> "base",
            "expected_hg_changeset"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430535 25200",
            "message"=> "Branch 1",
            "expected_hg_changeset"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430543 25200",
            "message"=> "Branch 2",
            "expected_hg_changeset"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430612 25200",
            "message"=> "Doubled",
            "expected_hg_changeset"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430628 25200",
            "message"=> "Add one",
            "expected_hg_changeset"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435041 25200",
            "message"=> "I think 4 is a nice number",
            "expected_hg_changeset"=> "16839021e338500b3cf7c9b871c8a07351697d68",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435062 25200",
            "message"=> "Replace the base",
            "expected_hg_changeset"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed 16839021e338500b3cf7c9b871c8a07351697d68",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435224 25200",
            "message"=> "Merge",
            "expected_hg_changeset"=> "6120679e1fedb0b2f3717bbf042e5fd718763042",
            "changed_files"=> "branch",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod many_files_dirs {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516807909 28800",
            "message"=> "1",
            "expected_hg_changeset"=> "5a28e25f924a5d209b82ce0713d8d83e68982bc8",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
            "dir1/file_1_in_dir1" => Some("content1\n"),
            "dir1/file_2_in_dir1" => Some("content3\n"),
            "dir1/subdir1/file_1" => Some("content4\n"),
            "dir2/file_1_in_dir2" => Some("content2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "5a28e25f924a5d209b82ce0713d8d83e68982bc8",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516808095 28800",
            "message"=> "2",
            "expected_hg_changeset"=> "2f866e7e549760934e31bf0420a873f65100ad63",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "dir1/subdir1/subsubdir1/file_1" => Some("content5\n"),
            "dir1/subdir1/subsubdir2/file_1" => Some("content6\n"),
            "dir1/subdir1/subsubdir2/file_2" => Some("content7\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "2f866e7e549760934e31bf0420a873f65100ad63",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516808173 28800",
            "message"=> "3",
            "expected_hg_changeset"=> "d261bc7900818dea7c86935b3fb17a33b2e3a6b4",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "dir1" => Some("dir1content\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d261bc7900818dea7c86935b3fb17a33b2e3a6b4",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516963897 28800",
            "message"=> "replace dir1 with a file",
            "expected_hg_changeset"=> "0c59c8d0da93cbf9d7f4b888f28823ffb2e3e480",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "dir1/subdir1/subsubdir1/file_1" => Some("content5\n"),
            "dir1/subdir1/subsubdir2/file_1" => Some("content6\n"),
            "dir1/subdir1/subsubdir2/file_2" => Some("content7\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "2f866e7e549760934e31bf0420a873f65100ad63",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516808173 28800",
            "message"=> "3",
            "expected_hg_changeset"=> "d261bc7900818dea7c86935b3fb17a33b2e3a6b4",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Stanislau Hlebik <stash@fb.com>",
            "author_date"=> "1516807909 28800",
            "message"=> "1",
            "expected_hg_changeset"=> "5a28e25f924a5d209b82ce0713d8d83e68982bc8",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod merge_uneven {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "base" => Some("base\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430496 25200",
            "message"=> "base",
            "expected_hg_changeset"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430535 25200",
            "message"=> "Branch 1",
            "expected_hg_changeset"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "15c40d0abc36d47fb51c8eaec51ac7aad31f669c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430543 25200",
            "message"=> "Branch 2",
            "expected_hg_changeset"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "d7542c9db7f4c77dab4b315edd328edf1514952f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430612 25200",
            "message"=> "Doubled",
            "expected_hg_changeset"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3cda5c78aa35f0f5b09780d971197b51cad4613a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506430628 25200",
            "message"=> "Add one",
            "expected_hg_changeset"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "branch" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1d8a907f7b4bf50c6a09c16361e2205047ecc5e5",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435041 25200",
            "message"=> "I think 4 is a nice number",
            "expected_hg_changeset"=> "16839021e338500b3cf7c9b871c8a07351697d68",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "b65231269f651cfe784fd1d97ef02a049a37b8a0",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435062 25200",
            "message"=> "Replace the base",
            "expected_hg_changeset"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "4f7f3fd428bec1a48f9314414b063c706d9c1aed",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "795b8133cf375f6d68d27c6c23db24cd5d0cd00f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "795b8133cf375f6d68d27c6c23db24cd5d0cd00f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "bc7b4d0f858c19e2474b03e442b8495fd7aeef33",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "bc7b4d0f858c19e2474b03e442b8495fd7aeef33",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "fc2cef43395ff3a7b28159007f63d6529d2f41ca",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "fc2cef43395ff3a7b28159007f63d6529d2f41ca",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "5d43888a3c972fe68c224f93d41b30e9f888df7c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "5d43888a3c972fe68c224f93d41b30e9f888df7c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435631 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "264f01429683b3dd8042cb3979e8bf37007118bc",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
            "2" => Some("2\n"),
            "3" => Some("3\n"),
            "4" => Some("4\n"),
            "5" => Some("5\n"),
            "branch" => Some("4\n"),
            "base" => Some("branch1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "264f01429683b3dd8042cb3979e8bf37007118bc 16839021e338500b3cf7c9b871c8a07351697d68",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506435672 25200",
            "message"=> "Merge two branches",
            "expected_hg_changeset"=> "b47ca72355a0af2c749d45a5689fd5bcce9898c7",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod unshared_merge_even {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "side" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506441702 25200",
            "message"=> "One",
            "expected_hg_changeset"=> "9d374b7e8180f933e3043ad1ffab0a9f95e2bac6",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "side" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506441720 25200",
            "message"=> "Two",
            "expected_hg_changeset"=> "1700524113b1a3b1806560341009684b4378660b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1700524113b1a3b1806560341009684b4378660b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442623 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "36ff88dd69c9966c9fad9d6d0457c52153039dde",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "36ff88dd69c9966c9fad9d6d0457c52153039dde",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "f61fdc0ddafd63503dcd8eed8994ec685bfc8941",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "f61fdc0ddafd63503dcd8eed8994ec685bfc8941",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "0b94a2881dda90f0d64db5fae3ee5695a38e7c8f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "0b94a2881dda90f0d64db5fae3ee5695a38e7c8f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "2fa8b4ee6803a18db4649a3843a723ef1dfe852b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "2fa8b4ee6803a18db4649a3843a723ef1dfe852b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "03b0589d9788870817d03ce7b87516648ed5b33a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "9d374b7e8180f933e3043ad1ffab0a9f95e2bac6",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "3775a86c64cceeaf68ffe3f012fc90774c42002b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3775a86c64cceeaf68ffe3f012fc90774c42002b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "eee492dcdeaae18f91822c4359dd516992e0dbcd",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "eee492dcdeaae18f91822c4359dd516992e0dbcd",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "163adc0d0f5d2eb0695ca123addcb92bab202096",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "163adc0d0f5d2eb0695ca123addcb92bab202096",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "f01e186c165a2fbe931fd1bf4454235398c591c9",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "f01e186c165a2fbe931fd1bf4454235398c591c9",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442629 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "33fb49d8a47b29290f5163e30b294339c89505a2",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "side" => Some("merge\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "33fb49d8a47b29290f5163e30b294339c89505a2 03b0589d9788870817d03ce7b87516648ed5b33a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442663 25200",
            "message"=> "Merge",
            "expected_hg_changeset"=> "d592490c4386cdb3373dd93af04d563de199b2fb",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{};
        let commit_metadata = btreemap!{
            "parents"=> "d592490c4386cdb3373dd93af04d563de199b2fb",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443414 25200",
            "message"=> "And work",
            "expected_hg_changeset"=> "7fe9947f101acb4acf7d945e69f0d6ce76a81113",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

pub mod unshared_merge_uneven {
    use super::*;

    pub fn getrepo(logger: Option<Logger>) -> BlobRepo {
        let blobrepo = BlobRepo::new_memblob_empty(logger, None).unwrap();

        // The code below was partially autogenerated using generate_new_fixtures.par
        let files = btreemap!{
            "side" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506441702 25200",
            "message"=> "One",
            "expected_hg_changeset"=> "9d374b7e8180f933e3043ad1ffab0a9f95e2bac6",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "side" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506441720 25200",
            "message"=> "Two",
            "expected_hg_changeset"=> "1700524113b1a3b1806560341009684b4378660b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "1700524113b1a3b1806560341009684b4378660b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442623 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "36ff88dd69c9966c9fad9d6d0457c52153039dde",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "36ff88dd69c9966c9fad9d6d0457c52153039dde",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "f61fdc0ddafd63503dcd8eed8994ec685bfc8941",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "f61fdc0ddafd63503dcd8eed8994ec685bfc8941",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "0b94a2881dda90f0d64db5fae3ee5695a38e7c8f",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "0b94a2881dda90f0d64db5fae3ee5695a38e7c8f",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "2fa8b4ee6803a18db4649a3843a723ef1dfe852b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "2fa8b4ee6803a18db4649a3843a723ef1dfe852b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442624 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "03b0589d9788870817d03ce7b87516648ed5b33a",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "1" => Some("1\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "9d374b7e8180f933e3043ad1ffab0a9f95e2bac6",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 1",
            "expected_hg_changeset"=> "3775a86c64cceeaf68ffe3f012fc90774c42002b",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "2" => Some("2\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "3775a86c64cceeaf68ffe3f012fc90774c42002b",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 2",
            "expected_hg_changeset"=> "eee492dcdeaae18f91822c4359dd516992e0dbcd",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "3" => Some("3\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "eee492dcdeaae18f91822c4359dd516992e0dbcd",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 3",
            "expected_hg_changeset"=> "163adc0d0f5d2eb0695ca123addcb92bab202096",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "4" => Some("4\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "163adc0d0f5d2eb0695ca123addcb92bab202096",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442628 25200",
            "message"=> "Add 4",
            "expected_hg_changeset"=> "f01e186c165a2fbe931fd1bf4454235398c591c9",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "5" => Some("5\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "f01e186c165a2fbe931fd1bf4454235398c591c9",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506442629 25200",
            "message"=> "Add 5",
            "expected_hg_changeset"=> "33fb49d8a47b29290f5163e30b294339c89505a2",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "6" => Some("6\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "33fb49d8a47b29290f5163e30b294339c89505a2",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443446 25200",
            "message"=> "Add 6",
            "expected_hg_changeset"=> "76096af83f52cc9a225ccfd8ddfb05ea18132343",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "7" => Some("7\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "76096af83f52cc9a225ccfd8ddfb05ea18132343",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443446 25200",
            "message"=> "Add 7",
            "expected_hg_changeset"=> "5a3e8d5a475ec07895e64ec1e1b2ec09bfa70e4e",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "8" => Some("8\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "5a3e8d5a475ec07895e64ec1e1b2ec09bfa70e4e",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443446 25200",
            "message"=> "Add 8",
            "expected_hg_changeset"=> "e819f2dd9a01d3e63d9a93e298968df275e6ad7c",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "9" => Some("9\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "e819f2dd9a01d3e63d9a93e298968df275e6ad7c",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443447 25200",
            "message"=> "Add 9",
            "expected_hg_changeset"=> "c1d5375bf73caab8725d759eaca56037c725c7d1",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "10" => Some("10\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "c1d5375bf73caab8725d759eaca56037c725c7d1",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443447 25200",
            "message"=> "Add 10",
            "expected_hg_changeset"=> "64011f64aaf9c2ad2e674f57c033987da4016f51",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{
            "10" => Some("10\n"),
            "6" => Some("6\n"),
            "7" => Some("7\n"),
            "8" => Some("8\n"),
            "9" => Some("9\n"),
            "side" => Some("Merge\n"),
        };
        let commit_metadata = btreemap!{
            "parents"=> "64011f64aaf9c2ad2e674f57c033987da4016f51 03b0589d9788870817d03ce7b87516648ed5b33a",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443464 25200",
            "message"=> "Merge",
            "expected_hg_changeset"=> "396c60c14337b31ffd0b6aa58a026224713dc07d",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        let files = btreemap!{};
        let commit_metadata = btreemap!{
            "parents"=> "396c60c14337b31ffd0b6aa58a026224713dc07d",
            "author"=> "Simon Farnsworth <simonfar@fb.com>",
            "author_date"=> "1506443471 25200",
            "message"=> "And remove",
            "expected_hg_changeset"=> "339ec3d2a986d55c5ac4670cca68cf36b8dc0b82",
        };
        create_bonsai_changeset_from_test_data(blobrepo.clone(), files, commit_metadata);

        blobrepo
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_branch_even() {
        async_unit::tokio_unit_test(|| {
            branch_even::getrepo(None);
        })
    }

    #[test]
    fn test_branch_uneven() {
        async_unit::tokio_unit_test(|| {
            branch_uneven::getrepo(None);
        })
    }

    #[test]
    fn test_branch_wide() {
        async_unit::tokio_unit_test(|| {
            branch_wide::getrepo(None);
        })
    }

    #[test]
    fn test_many_files_dirs() {
        async_unit::tokio_unit_test(|| {
            many_files_dirs::getrepo(None);
        })
    }

    #[test]
    fn test_linear() {
        async_unit::tokio_unit_test(|| {
            linear::getrepo(None);
        })
    }

    #[test]
    fn test_merge_even() {
        async_unit::tokio_unit_test(|| {
            merge_even::getrepo(None);
        })
    }

    #[test]
    fn test_merge_uneven() {
        async_unit::tokio_unit_test(|| {
            merge_uneven::getrepo(None);
        })
    }

    #[test]
    fn test_unshared_merge_even() {
        async_unit::tokio_unit_test(|| {
            unshared_merge_even::getrepo(None);
        })
    }

    #[test]
    fn test_unshared_merge_uneven() {
        async_unit::tokio_unit_test(|| {
            unshared_merge_uneven::getrepo(None);
        })
    }
}
