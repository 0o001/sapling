// @generated by Thrift. This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]

pub use self::errors::*;
pub use self::types::*;

pub mod types {
    use fbthrift::{
        Deserialize, GetTType, ProtocolReader, ProtocolWriter, Serialize, TType,
    };

    pub type fb_status = fb303_core::types::fb303_status;

    #[derive(Clone, Debug, PartialEq)]
    pub struct CountersInformation {
        pub data: std::collections::BTreeMap<String, i64>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct CpuProfileOptions {
        pub durationSecs: i32,
        pub selective: bool,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct PcapLoggingConfig {
        pub enabled: bool,
        pub prefix: String,
        pub timeoutMs: i32,
        pub snaplen: i32,
        pub numMessagesConnStart: i32,
        pub numMessagesConnEnd: i32,
        pub sampleConnectionPct: i32,
        pub rotateAfterMB: i32,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct PcapLoggingConfigException {
        pub message: String,
    }


    impl Default for self::CountersInformation {
        fn default() -> Self {
            Self {
                data: Default::default(),
            }
        }
    }

    impl GetTType for self::CountersInformation {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::CountersInformation {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("CountersInformation");
            p.write_field_begin("data", TType::Map, 1);
            Serialize::write(&self.data, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::CountersInformation {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_data = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Map, 1) => field_data = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                data: field_data.unwrap_or_default(),
            })
        }
    }


    impl Default for self::CpuProfileOptions {
        fn default() -> Self {
            Self {
                durationSecs: Default::default(),
                selective: Default::default(),
            }
        }
    }

    impl GetTType for self::CpuProfileOptions {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::CpuProfileOptions {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("CpuProfileOptions");
            p.write_field_begin("durationSecs", TType::I32, 1);
            Serialize::write(&self.durationSecs, p);
            p.write_field_end();
            p.write_field_begin("selective", TType::Bool, 2);
            Serialize::write(&self.selective, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::CpuProfileOptions {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_durationSecs = None;
            let mut field_selective = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_durationSecs = Some(Deserialize::read(p)?),
                    (TType::Bool, 2) => field_selective = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                durationSecs: field_durationSecs.unwrap_or_default(),
                selective: field_selective.unwrap_or_default(),
            })
        }
    }


    impl Default for self::PcapLoggingConfig {
        fn default() -> Self {
            Self {
                enabled: Default::default(),
                prefix: Default::default(),
                timeoutMs: Default::default(),
                snaplen: Default::default(),
                numMessagesConnStart: Default::default(),
                numMessagesConnEnd: Default::default(),
                sampleConnectionPct: Default::default(),
                rotateAfterMB: Default::default(),
            }
        }
    }

    impl GetTType for self::PcapLoggingConfig {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::PcapLoggingConfig {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("PcapLoggingConfig");
            p.write_field_begin("enabled", TType::Bool, 1);
            Serialize::write(&self.enabled, p);
            p.write_field_end();
            p.write_field_begin("prefix", TType::String, 2);
            Serialize::write(&self.prefix, p);
            p.write_field_end();
            p.write_field_begin("timeoutMs", TType::I32, 3);
            Serialize::write(&self.timeoutMs, p);
            p.write_field_end();
            p.write_field_begin("snaplen", TType::I32, 4);
            Serialize::write(&self.snaplen, p);
            p.write_field_end();
            p.write_field_begin("numMessagesConnStart", TType::I32, 5);
            Serialize::write(&self.numMessagesConnStart, p);
            p.write_field_end();
            p.write_field_begin("numMessagesConnEnd", TType::I32, 6);
            Serialize::write(&self.numMessagesConnEnd, p);
            p.write_field_end();
            p.write_field_begin("sampleConnectionPct", TType::I32, 7);
            Serialize::write(&self.sampleConnectionPct, p);
            p.write_field_end();
            p.write_field_begin("rotateAfterMB", TType::I32, 8);
            Serialize::write(&self.rotateAfterMB, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::PcapLoggingConfig {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_enabled = None;
            let mut field_prefix = None;
            let mut field_timeoutMs = None;
            let mut field_snaplen = None;
            let mut field_numMessagesConnStart = None;
            let mut field_numMessagesConnEnd = None;
            let mut field_sampleConnectionPct = None;
            let mut field_rotateAfterMB = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Bool, 1) => field_enabled = Some(Deserialize::read(p)?),
                    (TType::String, 2) => field_prefix = Some(Deserialize::read(p)?),
                    (TType::I32, 3) => field_timeoutMs = Some(Deserialize::read(p)?),
                    (TType::I32, 4) => field_snaplen = Some(Deserialize::read(p)?),
                    (TType::I32, 5) => field_numMessagesConnStart = Some(Deserialize::read(p)?),
                    (TType::I32, 6) => field_numMessagesConnEnd = Some(Deserialize::read(p)?),
                    (TType::I32, 7) => field_sampleConnectionPct = Some(Deserialize::read(p)?),
                    (TType::I32, 8) => field_rotateAfterMB = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                enabled: field_enabled.unwrap_or_default(),
                prefix: field_prefix.unwrap_or_default(),
                timeoutMs: field_timeoutMs.unwrap_or_default(),
                snaplen: field_snaplen.unwrap_or_default(),
                numMessagesConnStart: field_numMessagesConnStart.unwrap_or_default(),
                numMessagesConnEnd: field_numMessagesConnEnd.unwrap_or_default(),
                sampleConnectionPct: field_sampleConnectionPct.unwrap_or_default(),
                rotateAfterMB: field_rotateAfterMB.unwrap_or_default(),
            })
        }
    }


    impl Default for self::PcapLoggingConfigException {
        fn default() -> Self {
            Self {
                message: Default::default(),
            }
        }
    }

    impl GetTType for self::PcapLoggingConfigException {
        const TTYPE: TType = TType::Struct;
    }

    impl<P: ProtocolWriter> Serialize<P> for self::PcapLoggingConfigException {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("PcapLoggingConfigException");
            p.write_field_begin("message", TType::String, 1);
            Serialize::write(&self.message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P: ProtocolReader> Deserialize<P> for self::PcapLoggingConfigException {
        fn read(p: &mut P) -> anyhow::Result<Self> {
            let mut field_message = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_message = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            Ok(Self {
                message: field_message.unwrap_or_default(),
            })
        }
    }

}

pub mod services {
    pub mod facebook_service {
        use fbthrift::{
            ApplicationException, ApplicationExceptionErrorCode, Deserialize, ProtocolReader,
            ProtocolWriter, Serialize, TType,
        };

        #[derive(Clone, Debug)]
        pub enum GetRegexCountersCompressedExn {
            Success(Vec<u8>),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetRegexCountersCompressedExn {
            fn default() -> Self {
                GetRegexCountersCompressedExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetRegexCountersCompressedExn {
            fn from(exn: ApplicationException) -> Self {
                GetRegexCountersCompressedExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetRegexCountersCompressedExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetRegexCountersCompressedExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetRegexCountersCompressed");
                match self {
                    GetRegexCountersCompressedExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetRegexCountersCompressedExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetRegexCountersCompressedExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetRegexCountersCompressedExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetRegexCountersCompressedExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetRegexCountersCompressedExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetRegexCountersCompressedExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetCountersCompressedExn {
            Success(Vec<u8>),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetCountersCompressedExn {
            fn default() -> Self {
                GetCountersCompressedExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetCountersCompressedExn {
            fn from(exn: ApplicationException) -> Self {
                GetCountersCompressedExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetCountersCompressedExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetCountersCompressedExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetCountersCompressed");
                match self {
                    GetCountersCompressedExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetCountersCompressedExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetCountersCompressedExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetCountersCompressedExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetCountersCompressedExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetCountersCompressedExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetCountersCompressedExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetCpuProfileExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetCpuProfileExn {
            fn default() -> Self {
                GetCpuProfileExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetCpuProfileExn {
            fn from(exn: ApplicationException) -> Self {
                GetCpuProfileExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetCpuProfileExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetCpuProfileExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetCpuProfile");
                match self {
                    GetCpuProfileExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetCpuProfileExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetCpuProfileExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetCpuProfileExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetCpuProfileExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetCpuProfileExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetCpuProfileExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetCpuProfileWithOptionsExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetCpuProfileWithOptionsExn {
            fn default() -> Self {
                GetCpuProfileWithOptionsExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetCpuProfileWithOptionsExn {
            fn from(exn: ApplicationException) -> Self {
                GetCpuProfileWithOptionsExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetCpuProfileWithOptionsExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetCpuProfileWithOptionsExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetCpuProfileWithOptions");
                match self {
                    GetCpuProfileWithOptionsExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetCpuProfileWithOptionsExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetCpuProfileWithOptionsExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetCpuProfileWithOptionsExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetCpuProfileWithOptionsExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetCpuProfileWithOptionsExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetCpuProfileWithOptionsExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetHeapProfileExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetHeapProfileExn {
            fn default() -> Self {
                GetHeapProfileExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetHeapProfileExn {
            fn from(exn: ApplicationException) -> Self {
                GetHeapProfileExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetHeapProfileExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetHeapProfileExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetHeapProfile");
                match self {
                    GetHeapProfileExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetHeapProfileExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetHeapProfileExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetHeapProfileExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetHeapProfileExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetHeapProfileExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetHeapProfileExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetWallTimeProfileExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetWallTimeProfileExn {
            fn default() -> Self {
                GetWallTimeProfileExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetWallTimeProfileExn {
            fn from(exn: ApplicationException) -> Self {
                GetWallTimeProfileExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetWallTimeProfileExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetWallTimeProfileExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetWallTimeProfile");
                match self {
                    GetWallTimeProfileExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetWallTimeProfileExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetWallTimeProfileExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetWallTimeProfileExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetWallTimeProfileExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetWallTimeProfileExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetWallTimeProfileExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetMemoryUsageExn {
            Success(i64),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetMemoryUsageExn {
            fn default() -> Self {
                GetMemoryUsageExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetMemoryUsageExn {
            fn from(exn: ApplicationException) -> Self {
                GetMemoryUsageExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetMemoryUsageExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetMemoryUsageExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetMemoryUsage");
                match self {
                    GetMemoryUsageExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::I64,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetMemoryUsageExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetMemoryUsageExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetMemoryUsageExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::I64, 0i32), false) => {
                            once = true;
                            alt = Some(GetMemoryUsageExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetMemoryUsageExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetMemoryUsageExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetLoadExn {
            Success(f64),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetLoadExn {
            fn default() -> Self {
                GetLoadExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetLoadExn {
            fn from(exn: ApplicationException) -> Self {
                GetLoadExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetLoadExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetLoadExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetLoad");
                match self {
                    GetLoadExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Double,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetLoadExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetLoadExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetLoadExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Double, 0i32), false) => {
                            once = true;
                            alt = Some(GetLoadExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetLoadExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetLoadExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetPidExn {
            Success(i64),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetPidExn {
            fn default() -> Self {
                GetPidExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetPidExn {
            fn from(exn: ApplicationException) -> Self {
                GetPidExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetPidExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetPidExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetPid");
                match self {
                    GetPidExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::I64,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetPidExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetPidExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetPidExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::I64, 0i32), false) => {
                            once = true;
                            alt = Some(GetPidExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetPidExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetPidExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetCommandLineExn {
            Success(String),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetCommandLineExn {
            fn default() -> Self {
                GetCommandLineExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetCommandLineExn {
            fn from(exn: ApplicationException) -> Self {
                GetCommandLineExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetCommandLineExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetCommandLineExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetCommandLine");
                match self {
                    GetCommandLineExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetCommandLineExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetCommandLineExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetCommandLineExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::String, 0i32), false) => {
                            once = true;
                            alt = Some(GetCommandLineExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetCommandLineExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetCommandLineExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum ReinitializeExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for ReinitializeExn {
            fn default() -> Self {
                ReinitializeExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for ReinitializeExn {
            fn from(exn: ApplicationException) -> Self {
                ReinitializeExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for ReinitializeExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for ReinitializeExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Reinitialize");
                match self {
                    ReinitializeExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ReinitializeExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    ReinitializeExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for ReinitializeExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ReinitializeExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = ReinitializeExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ReinitializeExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum ShutdownExn {
            Success(()),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for ShutdownExn {
            fn default() -> Self {
                ShutdownExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for ShutdownExn {
            fn from(exn: ApplicationException) -> Self {
                ShutdownExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for ShutdownExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for ShutdownExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Shutdown");
                match self {
                    ShutdownExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ShutdownExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    ShutdownExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for ShutdownExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ShutdownExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = ShutdownExn::Success(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ShutdownExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }

        #[derive(Clone, Debug)]
        pub enum TranslateFramesExn {
            Success(Vec<String>),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for TranslateFramesExn {
            fn default() -> Self {
                TranslateFramesExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for TranslateFramesExn {
            fn from(exn: ApplicationException) -> Self {
                TranslateFramesExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for TranslateFramesExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for TranslateFramesExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("TranslateFrames");
                match self {
                    TranslateFramesExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::List,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    TranslateFramesExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    TranslateFramesExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for TranslateFramesExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::List, 0i32), false) => {
                            once = true;
                            alt = Some(TranslateFramesExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "TranslateFramesExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "TranslateFramesExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum GetPcapLoggingConfigExn {
            Success(crate::types::PcapLoggingConfig),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for GetPcapLoggingConfigExn {
            fn default() -> Self {
                GetPcapLoggingConfigExn::UnknownField(-1)
            }
        }

        impl From<ApplicationException> for GetPcapLoggingConfigExn {
            fn from(exn: ApplicationException) -> Self {
                GetPcapLoggingConfigExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for GetPcapLoggingConfigExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for GetPcapLoggingConfigExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("GetPcapLoggingConfig");
                match self {
                    GetPcapLoggingConfigExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Struct,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    GetPcapLoggingConfigExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    GetPcapLoggingConfigExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for GetPcapLoggingConfigExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Struct, 0i32), false) => {
                            once = true;
                            alt = Some(GetPcapLoggingConfigExn::Success(Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "GetPcapLoggingConfigExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or(
                    ApplicationException::new(
                        ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "GetPcapLoggingConfigExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum SetPcapLoggingConfigExn {
            Success(()),
            e(crate::types::PcapLoggingConfigException),
            ApplicationException(::fbthrift::types::ApplicationException),
            UnknownField(i32),
        }

        impl Default for SetPcapLoggingConfigExn {
            fn default() -> Self {
                SetPcapLoggingConfigExn::UnknownField(-1)
            }
        }

        impl From<crate::types::PcapLoggingConfigException> for SetPcapLoggingConfigExn {
            fn from(exn: crate::types::PcapLoggingConfigException) -> Self {
                SetPcapLoggingConfigExn::e(exn)
            }
        }

        impl From<ApplicationException> for SetPcapLoggingConfigExn {
            fn from(exn: ApplicationException) -> Self {
                SetPcapLoggingConfigExn::ApplicationException(exn)
            }
        }

        impl fbthrift::GetTType for SetPcapLoggingConfigExn {
            const TTYPE: fbthrift::TType = fbthrift::TType::Struct;
        }

        impl<P: ProtocolWriter> Serialize<P> for SetPcapLoggingConfigExn {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("SetPcapLoggingConfig");
                match self {
                    SetPcapLoggingConfigExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    SetPcapLoggingConfigExn::e(inner) => {
                        p.write_field_begin(
                            "e",
                            TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    SetPcapLoggingConfigExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                    SetPcapLoggingConfigExn::UnknownField(x) => {
                        p.write_field_begin("UnknownField", TType::I32, *x as i16);
                        x.write(p);
                        p.write_field_end();
                    }
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P: ProtocolReader> Deserialize<P> for SetPcapLoggingConfigExn {
            fn read(p: &mut P) -> anyhow::Result<Self> {
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = SetPcapLoggingConfigExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| ())?;
                    match ((fty, fid as i32), once) {
                        ((TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((TType::Void, 0i32), false) => {
                            once = true;
                            alt = SetPcapLoggingConfigExn::Success(Deserialize::read(p)?);
                        }
                        ((TType::Struct, 1), false) => {
                            once = true;
                            alt = SetPcapLoggingConfigExn::e(Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return Err(From::from(
                            ApplicationException::new(
                                ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "SetPcapLoggingConfigExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                Ok(alt)
            }
        }
    }
}

pub mod client {
    use fbthrift::*;
    use std::marker::PhantomData;
    use std::sync::Arc;

    pub struct FacebookServiceImpl<P, T> {
        transport: T,
        _phantom: PhantomData<fn() -> P>,
    }

    impl<P, T> FacebookServiceImpl<P, T> {
        pub fn new(transport: T) -> Self {
            Self {
                transport,
                _phantom: PhantomData,
            }
        }
    }

    pub trait FacebookService: Send {
        fn getRegexCountersCompressed(
            &self,
            arg_regex: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>>;
        fn getCountersCompressed(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>>;
        fn getCpuProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn getCpuProfileWithOptions(
            &self,
            arg_options: &crate::types::CpuProfileOptions,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn getHeapProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn getWallTimeProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn getMemoryUsage(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>>;
        fn getLoad(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<f64>> + Send + 'static>>;
        fn getPid(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>>;
        fn getCommandLine(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>>;
        fn reinitialize(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>>;
        fn shutdown(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>>;
        fn translateFrames(
            &self,
            arg_pointers: &Vec<i64>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<String>>> + Send + 'static>>;
        fn getPcapLoggingConfig(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<crate::types::PcapLoggingConfig>> + Send + 'static>>;
        fn setPcapLoggingConfig(
            &self,
            arg_config: &crate::types::PcapLoggingConfig,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>>;
    }

    impl<P, T> FacebookService for FacebookServiceImpl<P, T>
    where
        P: Protocol,
        T: Transport,
        P::Frame: Framing<DecBuf = FramingDecoded<T>>,
        ProtocolEncoded<P>: BufMutExt<Final = FramingEncodedFinal<T>>,
    {        fn getRegexCountersCompressed(
            &self,
            arg_regex: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getRegexCountersCompressed",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_regex", TType::String, 1i16);
                    arg_regex.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<Vec<u8>> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetRegexCountersCompressedExn::read(p)? {
                                    crate::services::facebook_service::GetRegexCountersCompressedExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetRegexCountersCompressedError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetRegexCountersCompressedError(
                                    crate::services::facebook_service::GetRegexCountersCompressedExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getCountersCompressed(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getCountersCompressed",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<Vec<u8>> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetCountersCompressedExn::read(p)? {
                                    crate::services::facebook_service::GetCountersCompressedExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetCountersCompressedError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetCountersCompressedError(
                                    crate::services::facebook_service::GetCountersCompressedExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getCpuProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getCpuProfile",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_profileDurationInSec", TType::I32, 1i16);
                    arg_profileDurationInSec.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetCpuProfileExn::read(p)? {
                                    crate::services::facebook_service::GetCpuProfileExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetCpuProfileError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetCpuProfileError(
                                    crate::services::facebook_service::GetCpuProfileExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getCpuProfileWithOptions(
            &self,
            arg_options: &crate::types::CpuProfileOptions,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getCpuProfileWithOptions",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_options", TType::Struct, 1i16);
                    arg_options.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetCpuProfileWithOptionsExn::read(p)? {
                                    crate::services::facebook_service::GetCpuProfileWithOptionsExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetCpuProfileWithOptionsError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetCpuProfileWithOptionsError(
                                    crate::services::facebook_service::GetCpuProfileWithOptionsExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getHeapProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getHeapProfile",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_profileDurationInSec", TType::I32, 1i16);
                    arg_profileDurationInSec.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetHeapProfileExn::read(p)? {
                                    crate::services::facebook_service::GetHeapProfileExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetHeapProfileError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetHeapProfileError(
                                    crate::services::facebook_service::GetHeapProfileExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getWallTimeProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getWallTimeProfile",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_profileDurationInSec", TType::I32, 1i16);
                    arg_profileDurationInSec.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetWallTimeProfileExn::read(p)? {
                                    crate::services::facebook_service::GetWallTimeProfileExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetWallTimeProfileError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetWallTimeProfileError(
                                    crate::services::facebook_service::GetWallTimeProfileExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getMemoryUsage(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getMemoryUsage",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<i64> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetMemoryUsageExn::read(p)? {
                                    crate::services::facebook_service::GetMemoryUsageExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetMemoryUsageError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetMemoryUsageError(
                                    crate::services::facebook_service::GetMemoryUsageExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getLoad(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<f64>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getLoad",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<f64> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetLoadExn::read(p)? {
                                    crate::services::facebook_service::GetLoadExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetLoadError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetLoadError(
                                    crate::services::facebook_service::GetLoadExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getPid(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getPid",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<i64> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetPidExn::read(p)? {
                                    crate::services::facebook_service::GetPidExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetPidError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetPidError(
                                    crate::services::facebook_service::GetPidExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getCommandLine(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getCommandLine",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<String> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetCommandLineExn::read(p)? {
                                    crate::services::facebook_service::GetCommandLineExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetCommandLineError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetCommandLineError(
                                    crate::services::facebook_service::GetCommandLineExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn reinitialize(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "reinitialize",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<()> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::ReinitializeExn::read(p)? {
                                    crate::services::facebook_service::ReinitializeExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceReinitializeError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceReinitializeError(
                                    crate::services::facebook_service::ReinitializeExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn shutdown(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "shutdown",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<()> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::ShutdownExn::read(p)? {
                                    crate::services::facebook_service::ShutdownExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceShutdownError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceShutdownError(
                                    crate::services::facebook_service::ShutdownExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn translateFrames(
            &self,
            arg_pointers: &Vec<i64>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<String>>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "translateFrames",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_pointers", TType::List, 1i16);
                    arg_pointers.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<Vec<String>> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::TranslateFramesExn::read(p)? {
                                    crate::services::facebook_service::TranslateFramesExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceTranslateFramesError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceTranslateFramesError(
                                    crate::services::facebook_service::TranslateFramesExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn getPcapLoggingConfig(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<crate::types::PcapLoggingConfig>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "getPcapLoggingConfig",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<crate::types::PcapLoggingConfig> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::GetPcapLoggingConfigExn::read(p)? {
                                    crate::services::facebook_service::GetPcapLoggingConfigExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceGetPcapLoggingConfigError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceGetPcapLoggingConfigError(
                                    crate::services::facebook_service::GetPcapLoggingConfigExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
        fn setPcapLoggingConfig(
            &self,
            arg_config: &crate::types::PcapLoggingConfig,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            use futures_preview::future::{FutureExt, TryFutureExt};
            let request = serialize!(P, |p| protocol::write_message(
                p,
                "setPcapLoggingConfig",
                MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_config", TType::Struct, 1i16);
                    arg_config.write(p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport
                .call(request)
                .and_then(|reply| futures_preview::future::ready({
                    let de = P::deserializer(reply);
                    move |mut p: P::Deserializer| -> anyhow::Result<()> {
                        let p = &mut p;
                        let (_, message_type, _) = p.read_message_begin(|_| ())?;
                        let result = match message_type {
                            MessageType::Reply => {
                                match crate::services::facebook_service::SetPcapLoggingConfigExn::read(p)? {
                                    crate::services::facebook_service::SetPcapLoggingConfigExn::Success(res) => Ok(res),
                                    exn => Err(crate::errors::ErrorKind::FacebookServiceSetPcapLoggingConfigError(exn).into()),
                                }
                            }
                            MessageType::Exception => {
                                let ae = ApplicationException::read(p)?;
                                Err(crate::errors::ErrorKind::FacebookServiceSetPcapLoggingConfigError(
                                    crate::services::facebook_service::SetPcapLoggingConfigExn::ApplicationException(ae),
                                ).into())
                            }
                            MessageType::Call | MessageType::Oneway | MessageType::InvalidMessageType => {
                                anyhow::bail!("Unexpected message type {:?}", message_type)
                            }
                        };
                        p.read_message_end()?;
                        result
                    }(de)
                }))
                .boxed()
        }
    }

    pub struct make_FacebookService;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = BuckGraphService::new(protocol, transport);
    /// ```
    impl dyn FacebookService {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> Arc<impl FacebookService + Send + 'static>
        where
            P: Protocol<Frame = T>,
            T: Transport,
        {
            let _ = protocol;
            Arc::new(FacebookServiceImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ClientFactory for make_FacebookService {
        type Api = dyn FacebookService + Send + Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> Arc<Self::Api>
        where
            P: Protocol<Frame = T>,
            T: Transport + Sync,
        {
            FacebookService::new(protocol, transport)
        }
    }
}

pub mod server {
    use async_trait::async_trait;
    use fbthrift::*;
    use std::marker::PhantomData;

    #[async_trait]
    pub trait FacebookService: Send + Sync + 'static {
        async fn getRegexCountersCompressed(
            &self,
            _regex: String,
        ) -> Result<Vec<u8>, crate::services::facebook_service::GetRegexCountersCompressedExn> {
            Err(crate::services::facebook_service::GetRegexCountersCompressedExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getRegexCountersCompressed",
                ),
            ))
        }
        async fn getCountersCompressed(
            &self,
        ) -> Result<Vec<u8>, crate::services::facebook_service::GetCountersCompressedExn> {
            Err(crate::services::facebook_service::GetCountersCompressedExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getCountersCompressed",
                ),
            ))
        }
        async fn getCpuProfile(
            &self,
            _profileDurationInSec: i32,
        ) -> Result<String, crate::services::facebook_service::GetCpuProfileExn> {
            Err(crate::services::facebook_service::GetCpuProfileExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getCpuProfile",
                ),
            ))
        }
        async fn getCpuProfileWithOptions(
            &self,
            _options: crate::types::CpuProfileOptions,
        ) -> Result<String, crate::services::facebook_service::GetCpuProfileWithOptionsExn> {
            Err(crate::services::facebook_service::GetCpuProfileWithOptionsExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getCpuProfileWithOptions",
                ),
            ))
        }
        async fn getHeapProfile(
            &self,
            _profileDurationInSec: i32,
        ) -> Result<String, crate::services::facebook_service::GetHeapProfileExn> {
            Err(crate::services::facebook_service::GetHeapProfileExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getHeapProfile",
                ),
            ))
        }
        async fn getWallTimeProfile(
            &self,
            _profileDurationInSec: i32,
        ) -> Result<String, crate::services::facebook_service::GetWallTimeProfileExn> {
            Err(crate::services::facebook_service::GetWallTimeProfileExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getWallTimeProfile",
                ),
            ))
        }
        async fn getMemoryUsage(
            &self,
        ) -> Result<i64, crate::services::facebook_service::GetMemoryUsageExn> {
            Err(crate::services::facebook_service::GetMemoryUsageExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getMemoryUsage",
                ),
            ))
        }
        async fn getLoad(
            &self,
        ) -> Result<f64, crate::services::facebook_service::GetLoadExn> {
            Err(crate::services::facebook_service::GetLoadExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getLoad",
                ),
            ))
        }
        async fn getPid(
            &self,
        ) -> Result<i64, crate::services::facebook_service::GetPidExn> {
            Err(crate::services::facebook_service::GetPidExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getPid",
                ),
            ))
        }
        async fn getCommandLine(
            &self,
        ) -> Result<String, crate::services::facebook_service::GetCommandLineExn> {
            Err(crate::services::facebook_service::GetCommandLineExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getCommandLine",
                ),
            ))
        }
        async fn reinitialize(
            &self,
        ) -> Result<(), crate::services::facebook_service::ReinitializeExn> {
            Err(crate::services::facebook_service::ReinitializeExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "reinitialize",
                ),
            ))
        }
        async fn shutdown(
            &self,
        ) -> Result<(), crate::services::facebook_service::ShutdownExn> {
            Err(crate::services::facebook_service::ShutdownExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "shutdown",
                ),
            ))
        }
        async fn translateFrames(
            &self,
            _pointers: Vec<i64>,
        ) -> Result<Vec<String>, crate::services::facebook_service::TranslateFramesExn> {
            Err(crate::services::facebook_service::TranslateFramesExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "translateFrames",
                ),
            ))
        }
        async fn getPcapLoggingConfig(
            &self,
        ) -> Result<crate::types::PcapLoggingConfig, crate::services::facebook_service::GetPcapLoggingConfigExn> {
            Err(crate::services::facebook_service::GetPcapLoggingConfigExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "getPcapLoggingConfig",
                ),
            ))
        }
        async fn setPcapLoggingConfig(
            &self,
            _config: crate::types::PcapLoggingConfig,
        ) -> Result<(), crate::services::facebook_service::SetPcapLoggingConfigExn> {
            Err(crate::services::facebook_service::SetPcapLoggingConfigExn::ApplicationException(
                ApplicationException::unimplemented_method(
                    "FacebookService",
                    "setPcapLoggingConfig",
                ),
            ))
        }
    }

    #[derive(Clone, Debug)]
    pub struct FacebookServiceProcessor<P, H, R, SS> {
        service: H,
        supa: SS,
        _phantom: PhantomData<(P, H, R)>,
    }

    impl<P, H, R, SS> FacebookServiceProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: FacebookService,
        SS: ThriftService<P::Frame>,
        SS::Handler: fb303_core::server::BaseService,
        P::Frame: Send + 'static,
    {
        pub fn new(service: H, supa: SS) -> Self {
            Self {
                service,
                supa,
                _phantom: PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_getRegexCountersCompressed<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_regex = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::String, 1) => field_regex = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getRegexCountersCompressed(
                field_regex.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getRegexCountersCompressed",
                        "regex",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetRegexCountersCompressedExn::Success(res)
                }
                Err(crate::services::facebook_service::GetRegexCountersCompressedExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetRegexCountersCompressedExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getRegexCountersCompressed",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getRegexCountersCompressed",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getCountersCompressed<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getCountersCompressed(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetCountersCompressedExn::Success(res)
                }
                Err(crate::services::facebook_service::GetCountersCompressedExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetCountersCompressedExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getCountersCompressed",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getCountersCompressed",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getCpuProfile<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_profileDurationInSec = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_profileDurationInSec = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getCpuProfile(
                field_profileDurationInSec.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getCpuProfile",
                        "profileDurationInSec",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetCpuProfileExn::Success(res)
                }
                Err(crate::services::facebook_service::GetCpuProfileExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetCpuProfileExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getCpuProfile",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getCpuProfile",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getCpuProfileWithOptions<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_options = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Struct, 1) => field_options = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getCpuProfileWithOptions(
                field_options.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getCpuProfileWithOptions",
                        "options",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetCpuProfileWithOptionsExn::Success(res)
                }
                Err(crate::services::facebook_service::GetCpuProfileWithOptionsExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetCpuProfileWithOptionsExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getCpuProfileWithOptions",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getCpuProfileWithOptions",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getHeapProfile<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_profileDurationInSec = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_profileDurationInSec = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getHeapProfile(
                field_profileDurationInSec.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getHeapProfile",
                        "profileDurationInSec",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetHeapProfileExn::Success(res)
                }
                Err(crate::services::facebook_service::GetHeapProfileExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetHeapProfileExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getHeapProfile",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getHeapProfile",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getWallTimeProfile<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_profileDurationInSec = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::I32, 1) => field_profileDurationInSec = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getWallTimeProfile(
                field_profileDurationInSec.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "getWallTimeProfile",
                        "profileDurationInSec",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetWallTimeProfileExn::Success(res)
                }
                Err(crate::services::facebook_service::GetWallTimeProfileExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetWallTimeProfileExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getWallTimeProfile",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getWallTimeProfile",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getMemoryUsage<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getMemoryUsage(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetMemoryUsageExn::Success(res)
                }
                Err(crate::services::facebook_service::GetMemoryUsageExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetMemoryUsageExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getMemoryUsage",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getMemoryUsage",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getLoad<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getLoad(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetLoadExn::Success(res)
                }
                Err(crate::services::facebook_service::GetLoadExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetLoadExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getLoad",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getLoad",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getPid<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getPid(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetPidExn::Success(res)
                }
                Err(crate::services::facebook_service::GetPidExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetPidExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getPid",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getPid",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getCommandLine<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getCommandLine(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetCommandLineExn::Success(res)
                }
                Err(crate::services::facebook_service::GetCommandLineExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetCommandLineExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getCommandLine",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getCommandLine",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_reinitialize<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.reinitialize(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::ReinitializeExn::Success(res)
                }
                Err(crate::services::facebook_service::ReinitializeExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::ReinitializeExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "reinitialize",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "reinitialize",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_shutdown<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.shutdown(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::ShutdownExn::Success(res)
                }
                Err(crate::services::facebook_service::ShutdownExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::ShutdownExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "shutdown",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "shutdown",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_translateFrames<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_pointers = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::List, 1) => field_pointers = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.translateFrames(
                field_pointers.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "translateFrames",
                        "pointers",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::TranslateFramesExn::Success(res)
                }
                Err(crate::services::facebook_service::TranslateFramesExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::TranslateFramesExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "translateFrames",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "translateFrames",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_getPcapLoggingConfig<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.getPcapLoggingConfig(
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::GetPcapLoggingConfigExn::Success(res)
                }
                Err(crate::services::facebook_service::GetPcapLoggingConfigExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::GetPcapLoggingConfigExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "getPcapLoggingConfig",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "getPcapLoggingConfig",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }

        async fn handle_setPcapLoggingConfig<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            _req_ctxt: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut field_config = None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| ())?;
                match (fty, fid as i32) {
                    (TType::Stop, _) => break,
                    (TType::Struct, 1) => field_config = Some(Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            let res = self.service.setPcapLoggingConfig(
                field_config.ok_or_else(|| {
                    ApplicationException::missing_arg(
                        "setPcapLoggingConfig",
                        "config",
                    )
                })?,
            ).await;
            let res = match res {
                Ok(res) => {
                    crate::services::facebook_service::SetPcapLoggingConfigExn::Success(res)
                }
                Err(crate::services::facebook_service::SetPcapLoggingConfigExn::ApplicationException(aexn)) => {
                    return Err(aexn.into())
                }
                Err(crate::services::facebook_service::SetPcapLoggingConfigExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "setPcapLoggingConfig",
                    )
                }
                Err(exn) => exn,
            };
            let res = serialize!(P, |p| fbthrift::protocol::write_message(
                p,
                "setPcapLoggingConfig",
                MessageType::Reply,
                seqid,
                |p| res.write(p),
            ));
            Ok(res)
        }
    }

    #[async_trait]
    impl<P, H, R, SS> fbthrift::ServiceProcessor<P> for FacebookServiceProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        H: FacebookService,
        SS: ThriftService<P::Frame>,
        SS::Handler: fb303_core::server::BaseService,
        P::Frame: Send + 'static,
        R: Send + Sync + 'static,
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[u8]) -> Result<usize, ApplicationException> {
            match name {
                b"getRegexCountersCompressed" => Ok(0usize),
                b"getCountersCompressed" => Ok(1usize),
                b"getCpuProfile" => Ok(2usize),
                b"getCpuProfileWithOptions" => Ok(3usize),
                b"getHeapProfile" => Ok(4usize),
                b"getWallTimeProfile" => Ok(5usize),
                b"getMemoryUsage" => Ok(6usize),
                b"getLoad" => Ok(7usize),
                b"getPid" => Ok(8usize),
                b"getCommandLine" => Ok(9usize),
                b"reinitialize" => Ok(10usize),
                b"shutdown" => Ok(11usize),
                b"translateFrames" => Ok(12usize),
                b"getPcapLoggingConfig" => Ok(13usize),
                b"setPcapLoggingConfig" => Ok(14usize),
                _ => Err(ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: usize,
            p: &mut P::Deserializer,
            r: &R,
            seqid: u32,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_getRegexCountersCompressed(p, r, seqid).await,
                1usize => self.handle_getCountersCompressed(p, r, seqid).await,
                2usize => self.handle_getCpuProfile(p, r, seqid).await,
                3usize => self.handle_getCpuProfileWithOptions(p, r, seqid).await,
                4usize => self.handle_getHeapProfile(p, r, seqid).await,
                5usize => self.handle_getWallTimeProfile(p, r, seqid).await,
                6usize => self.handle_getMemoryUsage(p, r, seqid).await,
                7usize => self.handle_getLoad(p, r, seqid).await,
                8usize => self.handle_getPid(p, r, seqid).await,
                9usize => self.handle_getCommandLine(p, r, seqid).await,
                10usize => self.handle_reinitialize(p, r, seqid).await,
                11usize => self.handle_shutdown(p, r, seqid).await,
                12usize => self.handle_translateFrames(p, r, seqid).await,
                13usize => self.handle_getPcapLoggingConfig(p, r, seqid).await,
                14usize => self.handle_setPcapLoggingConfig(p, r, seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "FacebookServiceProcessor",
                    bad
                ),
            }
        }
    }

    #[async_trait]
    impl<P, H, R, SS> ThriftService<P::Frame> for FacebookServiceProcessor<P, H, R, SS>
    where
        P: Protocol + Send + Sync + 'static,
        P::Deserializer: Send,
        P::Frame: Send + 'static,
        H: FacebookService,
        SS: ThriftService<P::Frame, RequestContext = R>,
        SS::Handler: fb303_core::server::BaseService,
        P::Frame: Send + 'static,
        R: Send + Sync + 'static,
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> anyhow::Result<ProtocolEncodedFinal<P>> {
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != MessageType::Call {
                return Err(From::from(ApplicationException::new(
                    ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                Ok(idx) => idx,
                Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                Ok(bytes) => Ok(bytes),
                Err(err) => match err.downcast_ref::<fbthrift::ProtocolError>() {
                    Some(fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = serialize!(P, |p| {
                            fbthrift::protocol::write_message(
                                p,
                                "FacebookServiceProcessor",
                                MessageType::Exception,
                                seqid,
                                |p| ae.write(p),
                            )
                        });
                        Ok(res)
                    }
                    _ => Err(err),
                },
            }
        }
    }

    pub fn make_FacebookService_server<F, H, R, SMAKE, SS>(
        proto: ProtocolID,
        handler: H,
        supa: SMAKE,
    ) -> Result<Box<dyn ThriftService<F, Handler = H, RequestContext = R> + Send + 'static>, ApplicationException>
    where
        F: Framing + Send + Sync + 'static,
        H: FacebookService,
        SMAKE: Fn(ProtocolID) -> Result<SS, ApplicationException>,
        SS: ThriftService<F, RequestContext = R>,
        SS::Handler: fb303_core::server::BaseService,
        R: Send + Sync + 'static,
    {
        match proto {
            ProtocolID::BinaryProtocol => {
                Ok(Box::new(FacebookServiceProcessor::<BinaryProtocol<F>, H, R, SS>::new(handler, supa(proto)?)))
            }
            ProtocolID::CompactProtocol => {
                Ok(Box::new(FacebookServiceProcessor::<CompactProtocol<F>, H, R, SS>::new(handler, supa(proto)?)))
            }
            bad => Err(ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
///     service MyService {
///         FunctionResponse myFunction(
///             1: FunctionRequest request,
///         ) throws {
///             1: StorageException s,
///             2: NotFoundException n,
///         ),
///
///         // other functions
///     }
///
///
/// we would end up with this mock object under crate::mock::MyService:
///
///     impl crate::client::MyService for MyService<'mock> {...}
///
///     pub struct MyService<'mock> {
///         pub myFunction: myFunction<'mock>,
///         // ...
///     }
///
///     impl dyn crate::client::MyService {
///         pub fn mock<'mock>() -> MyService<'mock>;
///     }
///
///     impl myFunction<'mock> {
///         // directly return the given success response
///         pub fn ret(&self, value: FunctionResponse);
///
///         // invoke closure to compute success response
///         pub fn mock(
///             &self,
///             mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///         );
///
///         // return one of the function's declared exceptions
///         pub fn throw<E>(&self, exception: E)
///         where
///             E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
///     }
///
///     impl From<StorageException> for MyFunctionExn {...}
///     impl From<NotFoundException> for MyFunctionExn {...}
///
///
/// The intended usage from a test would be:
///
///     use std::sync::Arc;
///     use thrift_if::client::MyService;
///
///     #[test]
///     fn test_my_client() {
///         let mock = Arc::new(MyService::mock());
///
///         // directly return a success response
///         let resp = FunctionResponse {...};
///         mock.myFunction.ret(resp);
///
///         // or give a closure to compute the success response
///         mock.myFunction.mock(|request| FunctionResponse {...});
///
///         // or throw one of the function's exceptions
///         mock.myFunction.throw(StorageException::ItFailed);
///
///         let out = do_the_thing(mock).wait().unwrap();
///         assert!(out.what_i_expected());
///     }
///
///     fn do_the_thing(
///         client: Arc<dyn MyService + Send + Sync + 'static>,
///     ) -> impl Future<Item = Out> {...}
pub mod mock {
    use async_trait::async_trait;
    use std::marker::PhantomData;

    pub struct FacebookService<'mock> {
        pub getRegexCountersCompressed: facebook_service::getRegexCountersCompressed<'mock>,
        pub getCountersCompressed: facebook_service::getCountersCompressed<'mock>,
        pub getCpuProfile: facebook_service::getCpuProfile<'mock>,
        pub getCpuProfileWithOptions: facebook_service::getCpuProfileWithOptions<'mock>,
        pub getHeapProfile: facebook_service::getHeapProfile<'mock>,
        pub getWallTimeProfile: facebook_service::getWallTimeProfile<'mock>,
        pub getMemoryUsage: facebook_service::getMemoryUsage<'mock>,
        pub getLoad: facebook_service::getLoad<'mock>,
        pub getPid: facebook_service::getPid<'mock>,
        pub getCommandLine: facebook_service::getCommandLine<'mock>,
        pub reinitialize: facebook_service::reinitialize<'mock>,
        pub shutdown: facebook_service::shutdown<'mock>,
        pub translateFrames: facebook_service::translateFrames<'mock>,
        pub getPcapLoggingConfig: facebook_service::getPcapLoggingConfig<'mock>,
        pub setPcapLoggingConfig: facebook_service::setPcapLoggingConfig<'mock>,
        _marker: PhantomData<&'mock ()>,
    }

    impl dyn super::client::FacebookService {
        pub fn mock<'mock>() -> FacebookService<'mock> {
            FacebookService {
                getRegexCountersCompressed: facebook_service::getRegexCountersCompressed::unimplemented(),
                getCountersCompressed: facebook_service::getCountersCompressed::unimplemented(),
                getCpuProfile: facebook_service::getCpuProfile::unimplemented(),
                getCpuProfileWithOptions: facebook_service::getCpuProfileWithOptions::unimplemented(),
                getHeapProfile: facebook_service::getHeapProfile::unimplemented(),
                getWallTimeProfile: facebook_service::getWallTimeProfile::unimplemented(),
                getMemoryUsage: facebook_service::getMemoryUsage::unimplemented(),
                getLoad: facebook_service::getLoad::unimplemented(),
                getPid: facebook_service::getPid::unimplemented(),
                getCommandLine: facebook_service::getCommandLine::unimplemented(),
                reinitialize: facebook_service::reinitialize::unimplemented(),
                shutdown: facebook_service::shutdown::unimplemented(),
                translateFrames: facebook_service::translateFrames::unimplemented(),
                getPcapLoggingConfig: facebook_service::getPcapLoggingConfig::unimplemented(),
                setPcapLoggingConfig: facebook_service::setPcapLoggingConfig::unimplemented(),
                _marker: PhantomData,
            }
        }
    }

    #[async_trait]
    impl<'mock> super::client::FacebookService for FacebookService<'mock> {
        fn getRegexCountersCompressed(
            &self,
            arg_regex: &str,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>> {
            let mut closure = self.getRegexCountersCompressed.closure.lock().unwrap();
            let closure: &mut dyn FnMut(String) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_regex.to_owned())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetRegexCountersCompressedError(error),
                ))))
        }
        fn getCountersCompressed(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<u8>>> + Send + 'static>> {
            let mut closure = self.getCountersCompressed.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetCountersCompressedError(error),
                ))))
        }
        fn getCpuProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.getCpuProfile.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i32) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_profileDurationInSec.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetCpuProfileError(error),
                ))))
        }
        fn getCpuProfileWithOptions(
            &self,
            arg_options: &crate::types::CpuProfileOptions,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.getCpuProfileWithOptions.closure.lock().unwrap();
            let closure: &mut dyn FnMut(crate::types::CpuProfileOptions) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_options.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetCpuProfileWithOptionsError(error),
                ))))
        }
        fn getHeapProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.getHeapProfile.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i32) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_profileDurationInSec.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetHeapProfileError(error),
                ))))
        }
        fn getWallTimeProfile(
            &self,
            arg_profileDurationInSec: i32,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.getWallTimeProfile.closure.lock().unwrap();
            let closure: &mut dyn FnMut(i32) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_profileDurationInSec.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetWallTimeProfileError(error),
                ))))
        }
        fn getMemoryUsage(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>> {
            let mut closure = self.getMemoryUsage.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetMemoryUsageError(error),
                ))))
        }
        fn getLoad(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<f64>> + Send + 'static>> {
            let mut closure = self.getLoad.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetLoadError(error),
                ))))
        }
        fn getPid(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<i64>> + Send + 'static>> {
            let mut closure = self.getPid.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetPidError(error),
                ))))
        }
        fn getCommandLine(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<String>> + Send + 'static>> {
            let mut closure = self.getCommandLine.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetCommandLineError(error),
                ))))
        }
        fn reinitialize(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            let mut closure = self.reinitialize.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceReinitializeError(error),
                ))))
        }
        fn shutdown(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            let mut closure = self.shutdown.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceShutdownError(error),
                ))))
        }
        fn translateFrames(
            &self,
            arg_pointers: &Vec<i64>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<Vec<String>>> + Send + 'static>> {
            let mut closure = self.translateFrames.closure.lock().unwrap();
            let closure: &mut dyn FnMut(Vec<i64>) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_pointers.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceTranslateFramesError(error),
                ))))
        }
        fn getPcapLoggingConfig(
            &self,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<crate::types::PcapLoggingConfig>> + Send + 'static>> {
            let mut closure = self.getPcapLoggingConfig.closure.lock().unwrap();
            let closure: &mut dyn FnMut() -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure()
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceGetPcapLoggingConfigError(error),
                ))))
        }
        fn setPcapLoggingConfig(
            &self,
            arg_config: &crate::types::PcapLoggingConfig,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = anyhow::Result<()>> + Send + 'static>> {
            let mut closure = self.setPcapLoggingConfig.closure.lock().unwrap();
            let closure: &mut dyn FnMut(crate::types::PcapLoggingConfig) -> _ = &mut **closure;
            Box::pin(futures_preview::future::ready(closure(arg_config.clone())
                .map_err(|error| anyhow::Error::from(
                    crate::errors::ErrorKind::FacebookServiceSetPcapLoggingConfigError(error),
                ))))
        }
    }

    mod facebook_service {
        use std::sync::Mutex;

        pub struct getRegexCountersCompressed<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(String) -> Result<
                    Vec<u8>,
                    crate::services::facebook_service::GetRegexCountersCompressedExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getRegexCountersCompressed<'mock> {
            pub fn unimplemented() -> Self {
                getRegexCountersCompressed {
                    closure: Mutex::new(Box::new(|_: String| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getRegexCountersCompressed",
                    ))),
                }
            }

            pub fn ret(&self, value: Vec<u8>) {
                self.mock(move |_: String| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(String) -> Vec<u8> + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |regex| Ok(mock(regex)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetRegexCountersCompressedExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: String| Err(exception.clone().into()));
            }
        }

        pub struct getCountersCompressed<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    Vec<u8>,
                    crate::services::facebook_service::GetCountersCompressedExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getCountersCompressed<'mock> {
            pub fn unimplemented() -> Self {
                getCountersCompressed {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getCountersCompressed",
                    ))),
                }
            }

            pub fn ret(&self, value: Vec<u8>) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> Vec<u8> + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetCountersCompressedExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct getCpuProfile<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i32) -> Result<
                    String,
                    crate::services::facebook_service::GetCpuProfileExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getCpuProfile<'mock> {
            pub fn unimplemented() -> Self {
                getCpuProfile {
                    closure: Mutex::new(Box::new(|_: i32| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getCpuProfile",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move |_: i32| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i32) -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |profileDurationInSec| Ok(mock(profileDurationInSec)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetCpuProfileExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i32| Err(exception.clone().into()));
            }
        }

        pub struct getCpuProfileWithOptions<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(crate::types::CpuProfileOptions) -> Result<
                    String,
                    crate::services::facebook_service::GetCpuProfileWithOptionsExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getCpuProfileWithOptions<'mock> {
            pub fn unimplemented() -> Self {
                getCpuProfileWithOptions {
                    closure: Mutex::new(Box::new(|_: crate::types::CpuProfileOptions| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getCpuProfileWithOptions",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move |_: crate::types::CpuProfileOptions| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(crate::types::CpuProfileOptions) -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |options| Ok(mock(options)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetCpuProfileWithOptionsExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: crate::types::CpuProfileOptions| Err(exception.clone().into()));
            }
        }

        pub struct getHeapProfile<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i32) -> Result<
                    String,
                    crate::services::facebook_service::GetHeapProfileExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getHeapProfile<'mock> {
            pub fn unimplemented() -> Self {
                getHeapProfile {
                    closure: Mutex::new(Box::new(|_: i32| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getHeapProfile",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move |_: i32| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i32) -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |profileDurationInSec| Ok(mock(profileDurationInSec)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetHeapProfileExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i32| Err(exception.clone().into()));
            }
        }

        pub struct getWallTimeProfile<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(i32) -> Result<
                    String,
                    crate::services::facebook_service::GetWallTimeProfileExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getWallTimeProfile<'mock> {
            pub fn unimplemented() -> Self {
                getWallTimeProfile {
                    closure: Mutex::new(Box::new(|_: i32| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getWallTimeProfile",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move |_: i32| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(i32) -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |profileDurationInSec| Ok(mock(profileDurationInSec)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetWallTimeProfileExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: i32| Err(exception.clone().into()));
            }
        }

        pub struct getMemoryUsage<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    i64,
                    crate::services::facebook_service::GetMemoryUsageExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getMemoryUsage<'mock> {
            pub fn unimplemented() -> Self {
                getMemoryUsage {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getMemoryUsage",
                    ))),
                }
            }

            pub fn ret(&self, value: i64) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> i64 + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetMemoryUsageExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct getLoad<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    f64,
                    crate::services::facebook_service::GetLoadExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getLoad<'mock> {
            pub fn unimplemented() -> Self {
                getLoad {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getLoad",
                    ))),
                }
            }

            pub fn ret(&self, value: f64) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> f64 + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetLoadExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct getPid<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    i64,
                    crate::services::facebook_service::GetPidExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getPid<'mock> {
            pub fn unimplemented() -> Self {
                getPid {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getPid",
                    ))),
                }
            }

            pub fn ret(&self, value: i64) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> i64 + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetPidExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct getCommandLine<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    String,
                    crate::services::facebook_service::GetCommandLineExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getCommandLine<'mock> {
            pub fn unimplemented() -> Self {
                getCommandLine {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getCommandLine",
                    ))),
                }
            }

            pub fn ret(&self, value: String) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> String + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetCommandLineExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct reinitialize<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::facebook_service::ReinitializeExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> reinitialize<'mock> {
            pub fn unimplemented() -> Self {
                reinitialize {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "reinitialize",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::ReinitializeExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct shutdown<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    (),
                    crate::services::facebook_service::ShutdownExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> shutdown<'mock> {
            pub fn unimplemented() -> Self {
                shutdown {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "shutdown",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::ShutdownExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct translateFrames<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(Vec<i64>) -> Result<
                    Vec<String>,
                    crate::services::facebook_service::TranslateFramesExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> translateFrames<'mock> {
            pub fn unimplemented() -> Self {
                translateFrames {
                    closure: Mutex::new(Box::new(|_: Vec<i64>| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "translateFrames",
                    ))),
                }
            }

            pub fn ret(&self, value: Vec<String>) {
                self.mock(move |_: Vec<i64>| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(Vec<i64>) -> Vec<String> + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |pointers| Ok(mock(pointers)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::TranslateFramesExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: Vec<i64>| Err(exception.clone().into()));
            }
        }

        pub struct getPcapLoggingConfig<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut() -> Result<
                    crate::types::PcapLoggingConfig,
                    crate::services::facebook_service::GetPcapLoggingConfigExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> getPcapLoggingConfig<'mock> {
            pub fn unimplemented() -> Self {
                getPcapLoggingConfig {
                    closure: Mutex::new(Box::new(|| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "getPcapLoggingConfig",
                    ))),
                }
            }

            pub fn ret(&self, value: crate::types::PcapLoggingConfig) {
                self.mock(move || value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut() -> crate::types::PcapLoggingConfig + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Ok(mock()));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::GetPcapLoggingConfigExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move || Err(exception.clone().into()));
            }
        }

        pub struct setPcapLoggingConfig<'mock> {
            pub(super) closure: Mutex<Box<
                dyn FnMut(crate::types::PcapLoggingConfig) -> Result<
                    (),
                    crate::services::facebook_service::SetPcapLoggingConfigExn,
                > + Send + Sync + 'mock,
            >>,
        }

        impl<'mock> setPcapLoggingConfig<'mock> {
            pub fn unimplemented() -> Self {
                setPcapLoggingConfig {
                    closure: Mutex::new(Box::new(|_: crate::types::PcapLoggingConfig| panic!(
                        "{}::{} is not mocked",
                        "FacebookService",
                        "setPcapLoggingConfig",
                    ))),
                }
            }

            pub fn ret(&self, value: ()) {
                self.mock(move |_: crate::types::PcapLoggingConfig| value.clone());
            }

            pub fn mock(&self, mut mock: impl FnMut(crate::types::PcapLoggingConfig) -> () + Send + Sync + 'mock) {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |config| Ok(mock(config)));
            }

            pub fn throw<E>(&self, exception: E)
            where
                E: Into<crate::services::facebook_service::SetPcapLoggingConfigExn>,
                E: Clone + Send + Sync + 'mock,
            {
                let mut closure = self.closure.lock().unwrap();
                *closure = Box::new(move |_: crate::types::PcapLoggingConfig| Err(exception.clone().into()));
            }
        }
    }
}

pub mod errors {
    use fbthrift::ApplicationException;
    use thiserror::Error;

    #[derive(Debug, Error)]
    pub enum ErrorKind {
        #[error("FacebookService::getRegexCountersCompressed failed with {0:?}")]
        FacebookServiceGetRegexCountersCompressedError(crate::services::facebook_service::GetRegexCountersCompressedExn),
        #[error("FacebookService::getCountersCompressed failed with {0:?}")]
        FacebookServiceGetCountersCompressedError(crate::services::facebook_service::GetCountersCompressedExn),
        #[error("FacebookService::getCpuProfile failed with {0:?}")]
        FacebookServiceGetCpuProfileError(crate::services::facebook_service::GetCpuProfileExn),
        #[error("FacebookService::getCpuProfileWithOptions failed with {0:?}")]
        FacebookServiceGetCpuProfileWithOptionsError(crate::services::facebook_service::GetCpuProfileWithOptionsExn),
        #[error("FacebookService::getHeapProfile failed with {0:?}")]
        FacebookServiceGetHeapProfileError(crate::services::facebook_service::GetHeapProfileExn),
        #[error("FacebookService::getWallTimeProfile failed with {0:?}")]
        FacebookServiceGetWallTimeProfileError(crate::services::facebook_service::GetWallTimeProfileExn),
        #[error("FacebookService::getMemoryUsage failed with {0:?}")]
        FacebookServiceGetMemoryUsageError(crate::services::facebook_service::GetMemoryUsageExn),
        #[error("FacebookService::getLoad failed with {0:?}")]
        FacebookServiceGetLoadError(crate::services::facebook_service::GetLoadExn),
        #[error("FacebookService::getPid failed with {0:?}")]
        FacebookServiceGetPidError(crate::services::facebook_service::GetPidExn),
        #[error("FacebookService::getCommandLine failed with {0:?}")]
        FacebookServiceGetCommandLineError(crate::services::facebook_service::GetCommandLineExn),
        #[error("FacebookService::reinitialize failed with {0:?}")]
        FacebookServiceReinitializeError(crate::services::facebook_service::ReinitializeExn),
        #[error("FacebookService::shutdown failed with {0:?}")]
        FacebookServiceShutdownError(crate::services::facebook_service::ShutdownExn),
        #[error("FacebookService::translateFrames failed with {0:?}")]
        FacebookServiceTranslateFramesError(crate::services::facebook_service::TranslateFramesExn),
        #[error("FacebookService::getPcapLoggingConfig failed with {0:?}")]
        FacebookServiceGetPcapLoggingConfigError(crate::services::facebook_service::GetPcapLoggingConfigExn),
        #[error("FacebookService::setPcapLoggingConfig failed with {0:?}")]
        FacebookServiceSetPcapLoggingConfigError(crate::services::facebook_service::SetPcapLoggingConfigExn),
        #[error("Application exception: {0:?}")]
        ApplicationException(ApplicationException),
    }

    impl From<ApplicationException> for ErrorKind {
        fn from(exn: ApplicationException) -> Self {
            ErrorKind::ApplicationException(exn)
        }
    }
}
