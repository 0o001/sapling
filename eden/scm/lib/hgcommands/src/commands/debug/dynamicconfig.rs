/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This software may be used and distributed according to the terms of the
 * GNU General Public License version 2.
 */

use super::define_flags;
use super::Repo;
use super::Result;
use super::IO;
use anyhow::bail;
use configparser::dynamicconfig::Generator;
use filetime::{set_file_mtime, FileTime};
use std::fs;
use tempfile::tempfile_in;

define_flags! {
    pub struct DebugDynamicConfigOpts {
        /// Host name to fetch a canary config from.
        canary: Option<String>,
    }
}

pub fn run(opts: DebugDynamicConfigOpts, _io: &mut IO, repo: Repo) -> Result<u8> {
    let repo_name: String = repo
        .repo_name()
        .map_or_else(|| "".to_string(), |s| s.to_string());

    // Verify that the filesystem is writable, otherwise exit early since we won't be able to write
    // the config.
    let repo_path = repo.shared_dot_hg_path();
    if tempfile_in(&repo_path).is_err() {
        bail!("no write access to {:?}", repo_path);
    }

    let username = repo
        .config()
        .get("ui", "username")
        .and_then(|u| Some(u.to_string()))
        .unwrap_or_else(|| "".to_string());

    let config = Generator::new(repo_name, repo.shared_dot_hg_path().to_path_buf(), username)?
        .execute(opts.canary)?;
    let config_str = config.to_string();
    let config_str = format!(
        "# version={}\n# Generated by `hg debugdynamicconfig` - DO NOT MODIFY\n{}",
        ::version::VERSION,
        config_str
    );

    let hgrc_path = repo_path.join("hgrc.dynamic");

    // If the file exists and will be unchanged, just update the mtime.
    if hgrc_path.exists()
        && fs::read_to_string(&hgrc_path).unwrap_or_else(|_| "".to_string()) == config_str
    {
        set_file_mtime(hgrc_path, FileTime::now())?;
    } else {
        fs::write(hgrc_path, config_str)?;
    }
    Ok(0)
}

pub fn name() -> &'static str {
    "debugdynamicconfig"
}

pub fn doc() -> &'static str {
    "generate the dynamic configuration"
}
