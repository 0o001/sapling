# Note that we don't have a python_binary() rule for hg_import_helper.py
# This gets run as a standalone script using the system Python installation,
# rather than as a PAR file.  It needs to use the system python interpreter
# in order to find the system's installed mercurial libraries.
# @autodeps

TESTER_SRCS = ["tester.cpp"]

cpp_library(
    name = "hg",
    srcs = glob(
        ["*.cpp"],
        excludes = TESTER_SRCS,
    ),
    headers = glob(["*.h"]),
    deps = [
        "//eden/fs/model:model",
        "//eden/fs/model/git:git",
        "//eden/fs/store:store",
        "//eden/fs/utils:path",
        "//eden/fs/utils:utils",
        "//folly:conv",
        "//folly:executor",
        "//folly:file_util",
        "//folly:range",
        "//folly:subprocess",
        "//folly:synchronized",
        "//folly:thread_local",
        "//folly/container:array",
        "//folly/executors:cpu_thread_pool_executor",
        "//folly/executors/thread_factory:named_thread_factory",
        "//folly/experimental:env_util",
        "//folly/experimental/logging:logging",
        "//folly/futures:core",
        "//folly/io:iobuf",
        "//folly/lang:bits",
        "//scm/hgext:datapack",
    ],
    external_deps = [
        ("boost", None, "boost_filesystem"),
        "gflags",
        "glog",
    ],
)

cpp_binary(
    name = "tester",
    srcs = TESTER_SRCS,
    deps = [
        ":hg",
        "//eden/fs/model:model",
        "//eden/fs/store:store",
        "//eden/fs/utils:path",
        "//folly:optional",
        "//folly/experimental:test_util",
        "//folly/experimental/logging:init",
        "//folly/experimental/logging:logging",
        "//folly/init:init",
        "//folly/io:iobuf",
        "//rocksdb:rocksdb",
    ],
    external_deps = [
        "gflags",
    ],
)
