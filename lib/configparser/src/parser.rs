
// Generated by generate_parser.py. Do not edit manually. Instead, edit
// spec.pest, then run generate_parser.py (require cargo-expand).
//
// This file should really be just 3 lines:
//
// #[derive(Parser)]
// #[grammar = "spec.pest"]
// struct ConfigParser;
//
// However, `#[grammar = "spec.pest"]` does not play well with Buck build,
// because pest_derive cannot find "spec.pest" in buck build environment.
// Therefore this file is @generated. @no-lint.
// pest-checksum: d00ac1967ce2bd9ff78af9d3e1345058a648964c.


#[allow(dead_code, non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum Rule {
    new_line,
    space,
    comment_start,
    line,
    name,
    value,
    equal_sign,
    config_item,
    left_bracket,
    right_bracket,
    section,
    comment_line,
    blank_line,
    directive,
    include,
    unset,
    compound,
    file,
}

pub(crate) struct ConfigParser;

impl ::pest::Parser<Rule> for ConfigParser {
    fn parse<'i>(rule: Rule, input: &'i str)
     ->
         ::std::result::Result<::pest::iterators::Pairs<'i, Rule>,
                               ::pest::Error<'i, Rule>> {
        mod rules {
            use super::Rule;
            #[inline]
            #[allow(unused_variables)]
            pub fn new_line<'i>(pos: ::pest::Position<'i>,
                                state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::new_line, pos,
                           |state, pos|
                               {
                                   pos.match_string("\n").or_else(|pos|
                                                                      {
                                                                          pos.match_string("\r\n")
                                                                      })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn space<'i>(pos: ::pest::Position<'i>,
                             state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::space, pos,
                           |state, pos|
                               {
                                   pos.match_string(" ").or_else(|pos|
                                                                     {
                                                                         pos.match_string("\t")
                                                                     })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn comment_start<'i>(pos: ::pest::Position<'i>,
                                     state:
                                         &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::comment_start, pos,
                           |state, pos|
                               {
                                   pos.match_string("#").or_else(|pos|
                                                                     {
                                                                         pos.match_string(";")
                                                                     })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn line<'i>(pos: ::pest::Position<'i>,
                            state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::line, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    {
                                                        pos.repeat(|pos|
                                                                       {
                                                                           state.sequence(move
                                                                                              |state|
                                                                                              {
                                                                                                  pos.sequence(|pos|
                                                                                                                   {
                                                                                                                       state.lookahead(false,
                                                                                                                                       move
                                                                                                                                           |state|
                                                                                                                                           {
                                                                                                                                               pos.lookahead(false,
                                                                                                                                                             |pos|
                                                                                                                                                                 {
                                                                                                                                                                     self::new_line(pos,
                                                                                                                                                                                    state)
                                                                                                                                                                 })
                                                                                                                                           }).and_then(|pos|
                                                                                                                                                           {
                                                                                                                                                               self::any(pos,
                                                                                                                                                                         state)
                                                                                                                                                           })
                                                                                                                   })
                                                                                              })
                                                                       })
                                                    })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn name<'i>(pos: ::pest::Position<'i>,
                            state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::name, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    state.sequence(move
                                                                                                                       |state|
                                                                                                                       {
                                                                                                                           pos.sequence(|pos|
                                                                                                                                            {
                                                                                                                                                state.lookahead(false,
                                                                                                                                                                move
                                                                                                                                                                    |state|
                                                                                                                                                                    {
                                                                                                                                                                        pos.lookahead(false,
                                                                                                                                                                                      |pos|
                                                                                                                                                                                          {
                                                                                                                                                                                              self::space(pos,
                                                                                                                                                                                                          state).or_else(|pos|
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                 self::new_line(pos,
                                                                                                                                                                                                                                                state).or_else(|pos|
                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                       self::comment_start(pos,
                                                                                                                                                                                                                                                                                           state)
                                                                                                                                                                                                                                                                   }).or_else(|pos|
                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                      pos.match_string("=")
                                                                                                                                                                                                                                                                                  }).or_else(|pos|
                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                     pos.match_string("[")
                                                                                                                                                                                                                                                                                                 }).or_else(|pos|
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                    pos.match_string("]")
                                                                                                                                                                                                                                                                                                                })
                                                                                                                                                                                                                             }).or_else(|pos|
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                pos.match_string("%")
                                                                                                                                                                                                                                            })
                                                                                                                                                                                          })
                                                                                                                                                                    }).and_then(|pos|
                                                                                                                                                                                    {
                                                                                                                                                                                        self::any(pos,
                                                                                                                                                                                                  state)
                                                                                                                                                                                    })
                                                                                                                                            })
                                                                                                                       }).and_then(|pos|
                                                                                                                                       {
                                                                                                                                           pos.repeat(|pos|
                                                                                                                                                          {
                                                                                                                                                              state.sequence(move
                                                                                                                                                                                 |state|
                                                                                                                                                                                 {
                                                                                                                                                                                     pos.sequence(|pos|
                                                                                                                                                                                                      {
                                                                                                                                                                                                          state.lookahead(false,
                                                                                                                                                                                                                          move
                                                                                                                                                                                                                              |state|
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                  pos.lookahead(false,
                                                                                                                                                                                                                                                |pos|
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        self::space(pos,
                                                                                                                                                                                                                                                                    state).or_else(|pos|
                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                           self::new_line(pos,
                                                                                                                                                                                                                                                                                                          state).or_else(|pos|
                                                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                                                                 self::comment_start(pos,
                                                                                                                                                                                                                                                                                                                                                     state)
                                                                                                                                                                                                                                                                                                                             }).or_else(|pos|
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                pos.match_string("=")
                                                                                                                                                                                                                                                                                                                                            }).or_else(|pos|
                                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                                               pos.match_string("[")
                                                                                                                                                                                                                                                                                                                                                           }).or_else(|pos|
                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                              pos.match_string("]")
                                                                                                                                                                                                                                                                                                                                                                          })
                                                                                                                                                                                                                                                                                       }).or_else(|pos|
                                                                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                                                                          pos.match_string("%")
                                                                                                                                                                                                                                                                                                      })
                                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                              }).and_then(|pos|
                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                  self::any(pos,
                                                                                                                                                                                                                                                            state)
                                                                                                                                                                                                                                              })
                                                                                                                                                                                                      })
                                                                                                                                                                                 })
                                                                                                                                                          })
                                                                                                                                       })
                                                                                                })
                                                                           })
                                                    })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn value<'i>(pos: ::pest::Position<'i>,
                             state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::value, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    self::line(pos,
                                                                                                               state).and_then(|pos|
                                                                                                                                   {
                                                                                                                                       pos.repeat(|pos|
                                                                                                                                                      {
                                                                                                                                                          state.sequence(move
                                                                                                                                                                             |state|
                                                                                                                                                                             {
                                                                                                                                                                                 pos.sequence(|pos|
                                                                                                                                                                                                  {
                                                                                                                                                                                                      self::new_line(pos,
                                                                                                                                                                                                                     state).and_then(|pos|
                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                             state.sequence(move
                                                                                                                                                                                                                                                                |state|
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    pos.sequence(|pos|
                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                         self::space(pos,
                                                                                                                                                                                                                                                                                                     state).and_then(|pos|
                                                                                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                                                                                             pos.repeat(|pos|
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                self::space(pos,
                                                                                                                                                                                                                                                                                                                                                            state)
                                                                                                                                                                                                                                                                                                                                            })
                                                                                                                                                                                                                                                                                                                         })
                                                                                                                                                                                                                                                                                     })
                                                                                                                                                                                                                                                                })
                                                                                                                                                                                                                                         }).and_then(|pos|
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             self::line(pos,
                                                                                                                                                                                                                                                                        state)
                                                                                                                                                                                                                                                         })
                                                                                                                                                                                                  })
                                                                                                                                                                             })
                                                                                                                                                      })
                                                                                                                                   })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn equal_sign<'i>(pos: ::pest::Position<'i>,
                                  state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::equal_sign, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    pos.repeat(|pos|
                                                                                                                   {
                                                                                                                       self::space(pos,
                                                                                                                                   state)
                                                                                                                   }).and_then(|pos|
                                                                                                                                   {
                                                                                                                                       pos.match_string("=")
                                                                                                                                   }).and_then(|pos|
                                                                                                                                                   {
                                                                                                                                                       pos.repeat(|pos|
                                                                                                                                                                      {
                                                                                                                                                                          self::space(pos,
                                                                                                                                                                                      state)
                                                                                                                                                                      })
                                                                                                                                                   })
                                                                                                })
                                                                           })
                                                    })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn config_item<'i>(pos: ::pest::Position<'i>,
                                   state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::config_item, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    self::name(pos,
                                                                                                               state).and_then(|pos|
                                                                                                                                   {
                                                                                                                                       self::equal_sign(pos,
                                                                                                                                                        state)
                                                                                                                                   }).and_then(|pos|
                                                                                                                                                   {
                                                                                                                                                       self::value(pos,
                                                                                                                                                                   state)
                                                                                                                                                   })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn left_bracket<'i>(pos: ::pest::Position<'i>,
                                    state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::left_bracket, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    { pos.match_string("[") })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn right_bracket<'i>(pos: ::pest::Position<'i>,
                                     state:
                                         &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::right_bracket, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    { pos.match_string("]") })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn section<'i>(pos: ::pest::Position<'i>,
                               state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::section, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    self::left_bracket(pos,
                                                                                                                       state).and_then(|pos|
                                                                                                                                           {
                                                                                                                                               self::name(pos,
                                                                                                                                                          state)
                                                                                                                                           }).and_then(|pos|
                                                                                                                                                           {
                                                                                                                                                               self::right_bracket(pos,
                                                                                                                                                                                   state)
                                                                                                                                                           })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn comment_line<'i>(pos: ::pest::Position<'i>,
                                    state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::comment_line, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    self::comment_start(pos,
                                                                                                                        state).and_then(|pos|
                                                                                                                                            {
                                                                                                                                                self::line(pos,
                                                                                                                                                           state)
                                                                                                                                            })
                                                                                                })
                                                                           })
                                                    })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn blank_line<'i>(pos: ::pest::Position<'i>,
                                  state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.rule(Rule::blank_line, pos,
                           |state, pos|
                               {
                                   state.atomic(::pest::Atomicity::Atomic,
                                                move |state|
                                                    {
                                                        pos.repeat(|pos|
                                                                       {
                                                                           self::space(pos,
                                                                                       state)
                                                                       })
                                                    })
                               })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn directive<'i>(pos: ::pest::Position<'i>,
                                 state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::directive, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    pos.match_string("%").and_then(|pos|
                                                                                                                                       {
                                                                                                                                           self::include(pos,
                                                                                                                                                         state).or_else(|pos|
                                                                                                                                                                            {
                                                                                                                                                                                self::unset(pos,
                                                                                                                                                                                            state)
                                                                                                                                                                            })
                                                                                                                                       })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn include<'i>(pos: ::pest::Position<'i>,
                               state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::include, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    pos.match_string("include").and_then(|pos|
                                                                                                                                             {
                                                                                                                                                 state.sequence(move
                                                                                                                                                                    |state|
                                                                                                                                                                    {
                                                                                                                                                                        pos.sequence(|pos|
                                                                                                                                                                                         {
                                                                                                                                                                                             self::space(pos,
                                                                                                                                                                                                         state).and_then(|pos|
                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                 pos.repeat(|pos|
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    self::space(pos,
                                                                                                                                                                                                                                                                state)
                                                                                                                                                                                                                                                })
                                                                                                                                                                                                                             })
                                                                                                                                                                                         })
                                                                                                                                                                    })
                                                                                                                                             }).and_then(|pos|
                                                                                                                                                             {
                                                                                                                                                                 self::line(pos,
                                                                                                                                                                            state)
                                                                                                                                                             })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn unset<'i>(pos: ::pest::Position<'i>,
                             state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.atomic(::pest::Atomicity::CompoundAtomic,
                             move |state|
                                 {
                                     state.rule(Rule::unset, pos,
                                                |state, pos|
                                                    {
                                                        state.sequence(move
                                                                           |state|
                                                                           {
                                                                               pos.sequence(|pos|
                                                                                                {
                                                                                                    pos.match_string("unset").and_then(|pos|
                                                                                                                                           {
                                                                                                                                               state.sequence(move
                                                                                                                                                                  |state|
                                                                                                                                                                  {
                                                                                                                                                                      pos.sequence(|pos|
                                                                                                                                                                                       {
                                                                                                                                                                                           state.sequence(move
                                                                                                                                                                                                              |state|
                                                                                                                                                                                                              {
                                                                                                                                                                                                                  pos.sequence(|pos|
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                       self::space(pos,
                                                                                                                                                                                                                                                   state).and_then(|pos|
                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                           pos.repeat(|pos|
                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                              self::space(pos,
                                                                                                                                                                                                                                                                                                          state)
                                                                                                                                                                                                                                                                                          })
                                                                                                                                                                                                                                                                       })
                                                                                                                                                                                                                                   })
                                                                                                                                                                                                              }).and_then(|pos|
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                  self::name(pos,
                                                                                                                                                                                                                                             state)
                                                                                                                                                                                                                              })
                                                                                                                                                                                       })
                                                                                                                                                                  })
                                                                                                                                           }).and_then(|pos|
                                                                                                                                                           {
                                                                                                                                                               pos.repeat(|pos|
                                                                                                                                                                              {
                                                                                                                                                                                  self::space(pos,
                                                                                                                                                                                              state)
                                                                                                                                                                              })
                                                                                                                                                           })
                                                                                                })
                                                                           })
                                                    })
                                 })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn compound<'i>(pos: ::pest::Position<'i>,
                                state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                self::config_item(pos,
                                  state).or_else(|pos|
                                                     {
                                                         self::section(pos,
                                                                       state).or_else(|pos|
                                                                                          {
                                                                                              self::comment_line(pos,
                                                                                                                 state)
                                                                                          }).or_else(|pos|
                                                                                                         {
                                                                                                             self::directive(pos,
                                                                                                                             state)
                                                                                                         })
                                                     }).or_else(|pos|
                                                                    {
                                                                        self::blank_line(pos,
                                                                                         state)
                                                                    })
            }
            #[inline]
            #[allow(unused_variables)]
            pub fn file<'i>(pos: ::pest::Position<'i>,
                            state: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                state.sequence(move |state|
                                   {
                                       pos.sequence(|pos|
                                                        {
                                                            self::soi(pos,
                                                                      state).and_then(|pos|
                                                                                          {
                                                                                              self::skip(pos,
                                                                                                         state)
                                                                                          }).and_then(|pos|
                                                                                                          {
                                                                                                              state.sequence(move
                                                                                                                                 |state|
                                                                                                                                 {
                                                                                                                                     pos.sequence(|pos|
                                                                                                                                                      {
                                                                                                                                                          self::compound(pos,
                                                                                                                                                                         state).and_then(|pos|
                                                                                                                                                                                             {
                                                                                                                                                                                                 self::skip(pos,
                                                                                                                                                                                                            state)
                                                                                                                                                                                             }).and_then(|pos|
                                                                                                                                                                                                             {
                                                                                                                                                                                                                 state.sequence(move
                                                                                                                                                                                                                                    |state|
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        pos.sequence(|pos|
                                                                                                                                                                                                                                                         {
                                                                                                                                                                                                                                                             pos.optional(|pos|
                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                  state.sequence(move
                                                                                                                                                                                                                                                                                                     |state|
                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                         pos.sequence(|pos|
                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                              self::new_line(pos,
                                                                                                                                                                                                                                                                                                                                             state).and_then(|pos|
                                                                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                                                                     self::skip(pos,
                                                                                                                                                                                                                                                                                                                                                                                state)
                                                                                                                                                                                                                                                                                                                                                                 }).and_then(|pos|
                                                                                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                                                                                     self::compound(pos,
                                                                                                                                                                                                                                                                                                                                                                                                    state)
                                                                                                                                                                                                                                                                                                                                                                                 })
                                                                                                                                                                                                                                                                                                                          })
                                                                                                                                                                                                                                                                                                     }).and_then(|pos|
                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                         pos.repeat(|pos|
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                            state.sequence(move
                                                                                                                                                                                                                                                                                                                                                               |state|
                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                   pos.sequence(|pos|
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                        self::skip(pos,
                                                                                                                                                                                                                                                                                                                                                                                                   state).and_then(|pos|
                                                                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                                                                           state.sequence(move
                                                                                                                                                                                                                                                                                                                                                                                                                                              |state|
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  pos.sequence(|pos|
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       self::new_line(pos,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      state).and_then(|pos|
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              self::skip(pos,
state)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }).and_then(|pos|
{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              self::compound(pos,
state)
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   })
                                                                                                                                                                                                                                                                                                                                                                                                                                              })
                                                                                                                                                                                                                                                                                                                                                                                                                       })
                                                                                                                                                                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                                                                                                                                                               })
                                                                                                                                                                                                                                                                                                                                        })
                                                                                                                                                                                                                                                                                                                     })
                                                                                                                                                                                                                                                                              })
                                                                                                                                                                                                                                                         })
                                                                                                                                                                                                                                    })
                                                                                                                                                                                                             })
                                                                                                                                                      })
                                                                                                                                 })
                                                                                                          }).and_then(|pos|
                                                                                                                          {
                                                                                                                              self::skip(pos,
                                                                                                                                         state)
                                                                                                                          }).and_then(|pos|
                                                                                                                                          {
                                                                                                                                              self::eoi(pos,
                                                                                                                                                        state)
                                                                                                                                          })
                                                        })
                                   })
            }
            #[inline]
            fn any<'i>(pos: ::pest::Position<'i>,
                       _: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                pos.skip(1)
            }
            #[inline]
            fn eoi<'i>(pos: ::pest::Position<'i>,
                       _: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                pos.at_end()
            }
            #[inline]
            fn soi<'i>(pos: ::pest::Position<'i>,
                       _: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                pos.at_start()
            }
            #[inline]
            #[allow(dead_code)]
            fn skip<'i>(pos: ::pest::Position<'i>,
                        _: &mut ::pest::ParserState<'i, Rule>)
             ->
                 ::std::result::Result<::pest::Position<'i>,
                                       ::pest::Position<'i>> {
                Ok(pos)
            }
        }
        ::pest::state(input,
                      move |mut state, pos|
                          {
                              match rule {
                                  Rule::new_line =>
                                  rules::new_line(pos, &mut state),
                                  Rule::space =>
                                  rules::space(pos, &mut state),
                                  Rule::comment_start =>
                                  rules::comment_start(pos, &mut state),
                                  Rule::line => rules::line(pos, &mut state),
                                  Rule::name => rules::name(pos, &mut state),
                                  Rule::value =>
                                  rules::value(pos, &mut state),
                                  Rule::equal_sign =>
                                  rules::equal_sign(pos, &mut state),
                                  Rule::config_item =>
                                  rules::config_item(pos, &mut state),
                                  Rule::left_bracket =>
                                  rules::left_bracket(pos, &mut state),
                                  Rule::right_bracket =>
                                  rules::right_bracket(pos, &mut state),
                                  Rule::section =>
                                  rules::section(pos, &mut state),
                                  Rule::comment_line =>
                                  rules::comment_line(pos, &mut state),
                                  Rule::blank_line =>
                                  rules::blank_line(pos, &mut state),
                                  Rule::directive =>
                                  rules::directive(pos, &mut state),
                                  Rule::include =>
                                  rules::include(pos, &mut state),
                                  Rule::unset =>
                                  rules::unset(pos, &mut state),
                                  Rule::compound =>
                                  rules::compound(pos, &mut state),
                                  Rule::file => rules::file(pos, &mut state),
                              }
                          })
    }
}
